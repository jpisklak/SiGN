[{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sign-r.github.io/SiGN/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sign-r.github.io/SiGN/articles/SiGN.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"SiGN","text":"Several decades ago, researchers discovered operant contingencies can arranged pigeons (Columba livia) reliably develop preference options yield less food provide (Kendall, 1974). behaviour—commonly referred “suboptimal” choice—results systematic reduction overall food intake controlled laboratory conditions. SiGN model explains puzzling pattern (choice behaviours concurrent-chains procedures) proposing choice conditionally reinforced stimuli signal reduction delay food. detailed description model calculations, see Dunn et al. (2024).","code":""},{"path":"https://sign-r.github.io/SiGN/articles/SiGN.html","id":"assumptions","dir":"Articles","previous_headings":"","what":"Assumptions","title":"SiGN","text":"document intended illustrate use R package, explain SiGN model requisite background information. make effective use article package, users expected foundational understanding concepts … Operant conditioning Schedules reinforcement Concurrent concurrent-chains procedures Delay-reduction hypothesis , course, …. SiGN (Signal Good News) model related terms unfamiliar, explanations R outputs provided document may difficult interpret. Additionally, working knowledge R programming assumed. examples provided require comfort vectorised functions, data manipulation, interpreting model output.","code":""},{"path":"https://sign-r.github.io/SiGN/articles/SiGN.html","id":"common-abbreviations","dir":"Articles","previous_headings":"","what":"Common Abbreviations","title":"SiGN","text":"following abbreviations used throughout package: dur: duration (units) p: probability il: initial link tl: terminal link tr: terminal reinforcement dr: delay-reduction FYI: context, terminal reinforcement refers stimulus delivered end chained schedule. often primary (unconditional) reinforcer food, SiGN model require —also secondary (conditional) reinforcer. reason, general term terminal reinforcement used package.","code":""},{"path":"https://sign-r.github.io/SiGN/articles/SiGN.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"SiGN","text":"SiGN package currently development, easiest way install GitHub using pak package: load package :","code":"install.packages(\"pak\") pak::pak(\"https://github.com/SiGN-R/SiGN\") library(SiGN)"},{"path":"https://sign-r.github.io/SiGN/articles/SiGN.html","id":"generating-a-prediction","dir":"Articles","previous_headings":"","what":"Generating a Prediction","title":"SiGN","text":"two steps generating predictions using SiGN model: Use choice_params() function create list model parameters. Pass list SiGN() function obtain predictions. SiGN model uses parameters concurrent-chains procedure generate priori prediction choice behaviour. required list arguments can created manually, helper function choice_params() simplifies process includes built-checks ensure valid input.","code":""},{"path":"https://sign-r.github.io/SiGN/articles/SiGN.html","id":"example-stagner-zentall-2010","dir":"Articles","previous_headings":"Generating a Prediction","what":"Example: Stagner & Zentall (2010)","title":"SiGN","text":"illustrate, consider contingencies described Stagner Zentall (2010), illustrated Figure 1.  Figure 1. Stagner & Zentall (2010) contingencies  procedure involves 16 distinct parameters, plus 2 additional parameters specific SiGN model—making total 18 values need input SiGN() function. speed process entering values, choice_params() function includes several pre-defined profiles: \"zentall\" (Stagner & Zentall, 2010), \"kendall\" (Kendall, 1985), \"fantino\" (Fantino, 1969). \"zentall\" profile matches setup shown Figure 1. can view full set parameters setting argument display_params TRUE: R documentation ?choice_params describes parameter needed, briefly listed Table 1 convenience.  Table 1: Arguments Model Parameters cases, s_delta require user modification (see choice_params() documentation exceptions). arguments beta_log beta_toggle influence SiGN model’s \\(\\beta\\) parameter supplied automatically function intended direct user manipulation. parameter list, can generate prediction passing SiGN() function: output, can see alternative (“suboptimal” alternative) selected approximately 96% time. extract additional model details can call output’s $details component: -depth explanation $details output beyond scope document. However, brief description component provided Table 2 . Readers interested theoretical rationale behind terms referred Dunn et al. 2024.  Table 2: Components SiGN() Function Output ($details)","code":"library(SiGN) params <- choice_params(\"zentall\", display_params = TRUE) #>   il_dur_a il_dur_b tl_dur_a1 tl_dur_a2 tl_dur_b1 tl_dur_b2 tl_p_a1 tl_p_a2 #> 1        1        1        10        10        10        10     0.2     0.8 #>   tl_p_b1 tl_p_b2 tr_p_a1 tr_p_a2 tr_p_b1 tr_p_b2 il_sched_a il_sched_b s_delta #> 1     0.2     0.8       1       0     0.5     0.5         FR         FR       1 #>   beta_log beta_toggle #> 1       10        TRUE mod <- SiGN(params) mod #> Predicted Choice Proportion: #> [1] 0.9590059 #>  #> Use `$details` for additional model terms. mod$details #>          cp        r_a        r_b r_a_com r_b_com    Big_T     cr_a      cr_b #> 1 0.9590059 0.05263158 0.04545455      NA      NA 21.14286 11.54496 0.5714286 #>   dr_avg_a  dr_avg_b dr_bonus_a dr_bonus_b   beta_a beta_b sig_a sig_b tr_p_a #> 1 1.428571 0.5714286   9.714286          0 1.041393      1  TRUE FALSE    0.2 #>   tr_p_b s_delta beta_log #> 1    0.5       1       10"},{"path":"https://sign-r.github.io/SiGN/articles/SiGN.html","id":"generating-multiple-predictions","dir":"Articles","previous_headings":"","what":"Generating Multiple Predictions","title":"SiGN","text":"SiGN() function supports vectorised input, allowing users generate multiple predictions simultaneously. particularly useful examining predicted choice changes function single parameter holding others constant. example, suppose want evaluate increasing duration initial links affects choice behaviour. can done supplying sequence values il_dur_a il_dur_b arguments choice_params(). rest parameters remain fixed according \"zentall\" profile, two overridden.   approach can extended explore effects parameter (combination parameters) predicted choice. Internally, function recycle align vector lengths needed, users verify values intended avoid unexpected behaviour.","code":"# Generate list of parameters il_preds <- choice_params(\"zentall\",   il_dur_a = seq(1, 100, by = 0.01),   il_dur_b = seq(1, 100, by = 0.01) ) # Generate predictions mod_il <- SiGN(il_preds) # Plot predictions library(tidyverse)  ggplot(mapping = aes(x = il_preds$il_dur_a, y = mod_il$cp)) +      # Add horizontal reference line at 0.5 (chance level)   geom_hline(yintercept = 0.5, linetype = 3) +      # Plot predicted choice proportions as a line   geom_line(linewidth = 1.5) +      # Restrict y-axis to [0, 1]   coord_cartesian(ylim = c(0, 1)) +      # Set axis labels   labs(     x = \"Duration of Initial Links in Seconds\",      y = \"Suboptimal Choice Proportion\"     ) +      # Base theme   theme_bw(base_size = 12) +      # Make axis text black for visibility   theme(axis.text = element_text(colour = \"black\"))"},{"path":"https://sign-r.github.io/SiGN/articles/SiGN.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"SiGN","text":"Dunn, R. M., Pisklak, J. M., McDevitt, M. ., & Spetch, M. L. (2024). Suboptimal choice: review quantification signal good news (SiGN) model. Psychological Review. 131(1), 58-78. https://doi.org/10.1037/rev0000416 Fantino, E. (1969). Choice rate reinforcement. Journal Experimental Analysis Behavior, 12(5), 723–730. https://doi.org/10.1901/jeab.1969.12-723 Kendall, S. B. (1974). Preference intermittent reinforcement. Journal Experimental Analysis Behavior, 21(3), 463–473. https://doi.org/10.1901/jeab.1974.21-463 Kendall, S. B. (1985). study choice percentage reinforcement. Behavioural Processes, 10(4), 399–413. https://doi.org/10.1016/0376-6357(85)90040-3 Stagner, J. P., & Zentall, T. R. (2010). Suboptimal choice behavior pigeons. Psychonomic Bulletin & Review, 17(3), 412–416. https://doi.org/10.3758/PBR.17.3.412","code":""},{"path":"https://sign-r.github.io/SiGN/articles/batch-predict.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Predictions From Data Frames","text":"many experimental designs, model parameters vary across conditions subjects conveniently stored tabular (.e., spreadsheet) form. cases, kind information loaded R data frame. vignette demonstrates use data frame generate multiple predictions quickly. walk full process using package’s included subopt_avian data set example.","code":""},{"path":"https://sign-r.github.io/SiGN/articles/batch-predict.html","id":"the-subopt_avian-data-set","dir":"Articles","previous_headings":"","what":"The subopt_avian Data Set","title":"Predictions From Data Frames","text":"Dunn et al. (2024) compiled results extensive collection studies investigating suboptimal choice behaviour. dataset included SiGN package. full data set available subopt_full. model evaluation purposes, however, Dunn et al. (2024) focused curated subset studies involving pigeons starlings—particularly pigeons, extensively studied yielded robust, consistently replicated findings. filtered dataset provided subopt_avian. row subopt_avian corresponds unique study condition. Many columns—specifically columns 9 24—map directly parameters expected SiGN() model function (see subopt_avian documentation full details column structure). special note column 8 ($cp), contains observed choice proportion reported condition. values can directly compared choice proportions predicted SiGN model, generate shortly.","code":"library(SiGN)  # Display column names names(subopt_avian) #>  [1] \"row\"             \"study\"           \"year\"            \"species\"         #>  [5] \"exp\"             \"condition\"       \"n\"               \"cp\"              #>  [9] \"il_dur_a\"        \"il_dur_b\"        \"tl_dur_a1\"       \"tl_dur_a2\"       #> [13] \"tl_dur_b1\"       \"tl_dur_b2\"       \"tl_p_a1\"         \"tl_p_a2\"         #> [17] \"tl_p_b1\"         \"tl_p_b2\"         \"tr_p_a1\"         \"tr_p_a2\"         #> [21] \"tr_p_b1\"         \"tr_p_b2\"         \"il_sched_a\"      \"il_sched_b\"      #> [25] \"tl_sched_a1\"     \"tl_sched_a2\"     \"tl_sched_b1\"     \"tl_sched_b2\"     #> [29] \"forced_exposure\" \"DOI\"             \"ref\"             \"data_version\""},{"path":"https://sign-r.github.io/SiGN/articles/batch-predict.html","id":"generating-a-list-of-model-parameters","dir":"Articles","previous_headings":"","what":"Generating a List of Model Parameters","title":"Predictions From Data Frames","text":"detailed Get Started, generate model predictions SiGN() function, first need prepare list model parameters format expects. parameters currently stored columns subopt_avian data frame (specifically, columns 9 24). However, yet list form, required inputs—s_delta, beta_log, beta_toggle—included data set. defaults parameters users need adjust, must present SiGN() run properly. Rather constructing list manually, use choice_params() function. function formats input correctly also performs important validation checks ensure required arguments present well-formed. convert relevant columns list named arguments, use .call() combination .list(). allows us pass data frame columns directly choice_params() typed individually. .call() function dynamically calls choice_params() unpacking data frame columns named arguments. words, .call(choice_params, .list(data_cols)) transforms column argument like il_dur_a = ..., il_dur_b = ..., —matching exactly choice_params() expects. works column names subopt_avian[9:24] aligned argument names choice_params() requires.","code":"# Store Model Parameters #------------------------------------------------------------------------------- # Extract relevant parameter columns (cols 9–24 align with choice_params()) data_cols <- subopt_avian[9:24]  # Construct model input list params <- do.call(choice_params, as.list(data_cols))"},{"path":"https://sign-r.github.io/SiGN/articles/batch-predict.html","id":"generating-the-predictions","dir":"Articles","previous_headings":"","what":"Generating the Predictions","title":"Predictions From Data Frames","text":"Now constructed valid list model parameters, can pass SiGN() function generate predictions. function returns variety outputs, specifically interested predicted choice proportions. SiGN model’s predicted choice proportion, row subopt_avian[9:24], can called preds$cp. values can compared directly observed choice proportions stored subopt_avian$cp. information SiGN() function outputs, see Get Started article.","code":"# Generate model predictions #------------------------------------------------------------------------------- preds <- SiGN(params)"},{"path":"https://sign-r.github.io/SiGN/articles/batch-predict.html","id":"visualising-the-predictions","dir":"Articles","previous_headings":"","what":"Visualising the Predictions","title":"Predictions From Data Frames","text":"help visualise model’s performance, shall fit simple linear regression observed versus predicted choice proportions. provides clear visual summary relationship allows us overlay fitted regression line 1:1 reference line. closer data points fall 1:1 line, closely model’s predictions match observed values—offering quick intuitive check model accuracy.","code":"# Fit a linear model comparing observed vs predicted reg <- lm(subopt_avian$cp ~ preds$cp)  # Format annotation for plot reg_txt <- sprintf(   \"y = %.2f + %.2f x\\n\",   reg$coefficients[1], reg$coefficients[2] ) library(tidyverse)  ggplot(mapping = aes(x = preds$cp, y = subopt_avian$cp)) +    # Add 1:1 reference line (dashed) to assess prediction accuracy   geom_abline(intercept = 0, slope = 1, linetype = 3) +    # Plot each observed vs. predicted data point as an open circle   geom_point(pch = 1, size = 1.75, stroke = 0.5) +    # Fit and overlay a linear regression line (no confidence band)   geom_smooth(method = \"lm\", se = FALSE) +    # Axis labels   labs(x = \"Predicted\", y = \"Obtained\") +    # Add regression summary text   annotate(\"text\", x = 0.2, y = 0.9, label = reg_txt, size = 3.5) +    # Base theme   theme_bw(base_size = 12) +    # Make axis text black for visibility   theme(axis.text = element_text(colour = \"black\"))"},{"path":"https://sign-r.github.io/SiGN/articles/batch-predict.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Predictions From Data Frames","text":"Dunn, R. M., Pisklak, J. M., McDevitt, M. ., & Spetch, M. L. (2024). Suboptimal choice: review quantification signal good news (SiGN) model. Psychological Review. 131(1), 58-78. https://doi.org/10.1037/rev0000416","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"general-usage","dir":"Articles","previous_headings":"","what":"General Usage","title":"Descriptive Statistics","text":"use function, two inputs technically required: vector observed choice proportions vector predicted choice proportions model. function can take additional arguments k epsilon, pertain information-theoretic outputs, considered (see Information-Theoretic Statistics). called, returns list containing three components: $desc_stats: data frame containing descriptive fit metrics described (e.g., mean bias, RMSE, MAE, CCC, etc.). $info_criteria: data frame containing information-theoretic model comparison metrics (e.g., log-likelihood, AIC, BIC) based beta-distributed error model. discussed detail companion article, Information-Theoretic Statistics. $residuals: vector residuals (.e., observed minus predicted values), provided convenience case users wish conduct additional analyses visualizations.","code":"choice_mod_eval(observed, predicted, k = 0, epsilon = 0.001, ...)"},{"path":[]},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"r2-coefficient-of-determination","dir":"Articles","previous_headings":"Model Metrics","what":"\\(R^2\\) (Coefficient of Determination)","title":"Descriptive Statistics","text":"Computed residuals predictive model (see Equation 1), regression predicted observed values, intended reflect proportion variance observed data accounted model. However, caution statistic order: Though commonly used nonlinear models, residual-based \\(R^2\\) lacks clear “variance explained” interpretation linear regression—constrained [0,1] interval. sometimes referred type pseudo-\\(R^2\\) applied non-linear models. said, pseudo-\\(R^2\\) computed directly residuals model evaluated, rather secondary regression observed versus predicted values, arguably offers better heuristic assessing model fit context. Still, even form \\(R^2\\) can misleading models nonlinear structure—like SiGN (e.g., Spiess & Neumeyer, 2010). \\[ \\begin{equation} \\tag{1} R^2 = 1 - \\frac{\\sum_i (y_i - \\hat{y}_i)^2}{\\sum_i (y_i - \\bar{y})^2} \\end{equation} \\] \\(y_i\\) observed choice proportion row \\(\\) subopt_avian. \\(\\bar{y}\\) mean observed choice proportion. \\(\\hat{y_i}\\) model-predicted choice proportion row \\(\\).","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"mean-bias","dir":"Articles","previous_headings":"Model Metrics","what":"Mean bias","title":"Descriptive Statistics","text":"Mean bias captures average directional error predicted observed values. indicates whether model systematically overpredicts underpredicts average: positive mean bias indicates model overpredicts average. negative mean bias indicates model underpredicts average. value near zero implies - underpredictions roughly cancel —imply inaccuracy (model consistently biased one direction.). Note , - underpredictions can cancel , mean bias reflect magnitude prediction errors. See Equation 2. \\[ \\begin{equation} \\tag{2} \\text{Mean Bias} = \\frac{1}{n} \\sum_{=1}^{n} \\left( \\hat{y}_i - y_i \\right) \\end{equation} \\] \\(n\\) number observations.","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"rmse-root-mean-squared-error","dir":"Articles","previous_headings":"Model Metrics","what":"RMSE (root mean squared error)","title":"Descriptive Statistics","text":"RMSE measures typical magnitude prediction error averaging squared differences predicted observed values taking square root. errors squared, RMSE penalises larger errors heavily, making sensitive outliers. result units original data. See Equation 3. \\[ \\begin{equation} \\tag{3} \\text{RMSE} = \\sqrt{ \\frac{1}{n} \\sum_{=1}^{n} \\left( \\hat{y}_i - y_i \\right)^2 } \\end{equation} \\]","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"mae-mean-absolute-error","dir":"Articles","previous_headings":"Model Metrics","what":"MAE (mean absolute error)","title":"Descriptive Statistics","text":"MAE also measures average magnitude prediction error uses absolute differences rather squared differences. Unlike RMSE, treats errors equally, making robust outliers. Like RMSE, reported units observed data. See Equation 4. \\[ \\begin{equation} \\tag{4} \\text{MAE} = \\frac{1}{n} \\sum_{=1}^{n} \\left| \\hat{y}_i - y_i \\right|\\end{equation} \\]","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"median-absolute-error","dir":"Articles","previous_headings":"Model Metrics","what":"Median Absolute Error","title":"Descriptive Statistics","text":"metric provides robust summary typical prediction error computing median absolute differences predicted observed values. relying median rather mean, metric extremely robust outliers—though may less sensitive smaller, systematic prediction errors RMSE MAE. See Equation 5. \\[ \\begin{equation} \\tag{5} \\text{Median Absolute Error} = \\text{median} \\left( \\left| \\hat{y}_i - y_i \\right| \\right) \\end{equation} \\]","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"lins-concordance-correlation-coefficient-ccc","dir":"Articles","previous_headings":"Model Metrics","what":"Lin’s Concordance Correlation Coefficient (CCC)","title":"Descriptive Statistics","text":"Lin’s CCC evaluates precision (well predictions correlate observations) accuracy (close 1:1 identity line). makes stringent measure agreement Pearson’s correlation alone. CCC 1 indicates perfect concordance (.e., points lie 1:1 line). CCC 0 indicates concordance. Despite bounded –1 1 like Pearson’s correlation coefficient, CCC much demanding. instance, Pearson correlation 0.5 might suggest moderate association, CCC 0.5 typically reflects poor agreement, indicates imprecise predictions also low accuracy. Interpreting CCC values depends heavily domain measurement context , speaking generally, CCC values 0.9 often considered strong, values 0.7 0.9 suggest moderate agreement, values 0.7 indicate weak concordance—even corresponding Pearson correlation appears acceptable. See Equation 6. \\[ \\begin{equation} \\tag{6} \\rho_c = \\frac{2 \\sigma_{xy}}{\\sigma_x^2 + \\sigma_y^2 + (\\mu_x - \\mu_y)^2} \\end{equation} \\] \\(\\rho_c\\) Lin’s Concordance Correlation Coefficient \\(\\sigma_{xy}\\) covariance predicted observed values. \\(\\mu_x, \\mu_y\\) means predicted observed values. \\(\\sigma_x, \\sigma_y\\) standard deviation predicted observed values. Note: default, choice_mod_eval() computes CCC using bias-corrected sample statistics. match uncorrected form shown Equation 6, set bias_correction = FALSE. See documentation ccc() details.","code":""},{"path":[]},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"background","dir":"Articles","previous_headings":"Reassessing Dunn et al. (2024)","what":"Background","title":"Descriptive Statistics","text":"demonstrate real-world use case choice_mod_eval(), revisit analysis Dunn et al. (2024), evaluated SiGN model using curated subset avian suboptimal choice studies. data set included SiGN package subopt_avian. original analysis, Dunn et al. reported \\(R^2\\) values based correlation observed predicted choice proportions. logic intuitive: model’s predictions align data, correlation—hence \\(R^2\\)—approach 1. Indeed, scatterplot observed versus predicted values showed strong linear trend, slope near 1 intercept near 0. first glance, suggests excellent model performance. However, approach reflects strength linear association—assess well predictions actually replicate observed data, validate model’s theoretical assumptions. context, high correlation-based \\(R^2\\) may signal superficial agreement rather meaningful fit. appropriate alternative compute \\(R^2\\) based residual error predictive model (Kvålseth, 1985)—version detailed Equation 1 . residual-based \\(R^2\\) also limitations (discussed earlier), offers direct measure predictive accuracy. reasons, many researchers recommend placing greater weight information-theoretic metrics Akaike Information Criterion (AIC) Bayesian Information Criterion (BIC), especially comparing nonlinear models models differing complexity (Spiess & Neumeyer, 2010). criteria provide theoretically grounded assessments model fit penalise complexity principled way. said, ’s important note SiGN model used Dunn et al. fitted data conventional sense—contained free parameters. Predictions generated solely predefined structure choice procedure, tuning optimise fit. result, traditional model selection tools like AIC BIC—rely maximised likelihoods penalise model flexibility—strictly (perhaps say, “easily”) applicable context.","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"generating-predictions","dir":"Articles","previous_headings":"Reassessing Dunn et al. (2024)","what":"Generating Predictions","title":"Descriptive Statistics","text":"row subopt_avian represents distinct condition published study. Columns 9 24 correspond directly parameters required choice_params() function. (full details, consult subopt_avian documentation.) row subopt_avian data set represents distinct experimental condition published suboptimal choice study. Columns 9 24 provide parameters needed choice_params() function (see subopt_avian documentation full details). requested peer review, Dunn et al. (2024) evaluated standard SiGN model along two simplified variants: One \\(\\beta\\) term removed, One without bonus delay reduction mechanism. SiGN model’s \\(\\beta\\) term serves adjust trade-conditional terminal reinforcement, often opposition inside suboptimal choice procedures. influence intended modest one. contrast, bonus delay reduction core feature SiGN model suboptimal choice contexts. Removing effectively reverts model earlier formulation proposed Spetch & Dunn (1987), applies unsignalled procedures. , expect “bonus” model perform poorly subopt_avian data largely comprised signalled procedures. following code reconstructs three models stores predictions—alongside observed choice proportions—data frame called preds.","code":"library(SiGN) names(subopt_avian) #>  [1] \"row\"             \"study\"           \"year\"            \"species\"         #>  [5] \"exp\"             \"condition\"       \"n\"               \"cp\"              #>  [9] \"il_dur_a\"        \"il_dur_b\"        \"tl_dur_a1\"       \"tl_dur_a2\"       #> [13] \"tl_dur_b1\"       \"tl_dur_b2\"       \"tl_p_a1\"         \"tl_p_a2\"         #> [17] \"tl_p_b1\"         \"tl_p_b2\"         \"tr_p_a1\"         \"tr_p_a2\"         #> [21] \"tr_p_b1\"         \"tr_p_b2\"         \"il_sched_a\"      \"il_sched_b\"      #> [25] \"tl_sched_a1\"     \"tl_sched_a2\"     \"tl_sched_b1\"     \"tl_sched_b2\"     #> [29] \"forced_exposure\" \"DOI\"             \"ref\"             \"data_version\" # Construct model input list params <- do.call(choice_params, as.list(subopt_avian[9:24]))  # Model 1: Full SiGN model predictions full <- SiGN(params)$details  # Model 2: No beta model predictions params$beta_toggle = FALSE no_beta <- SiGN(params)$details  # Model 3: No bonus model (without bonus delay reduction term) no_bonus <- (full$r_a * full$dr_avg_a) /   ((full$r_a * full$dr_avg_a) + (full$r_b * full$dr_avg_b))  # Apply boundary conditions for model 3 cond_1 <- full$dr_avg_a > 0 & full$dr_avg_b < 0 cond_0 <- full$dr_avg_a < 0 & full$dr_avg_b > 0  no_bonus <- ifelse(cond_1 == TRUE, 1,   ifelse(cond_0 == TRUE, 0, no_bonus) ) # Store observed and predicted values preds <- data.frame(   cp_obs = subopt_avian$cp, # observed values   full = full$cp,           # full model predictions   no_beta = no_beta$cp,     # no beta model predictions   no_bonus = no_bonus       # no bonus model predictions )"},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"calculating-the-metrics","dir":"Articles","previous_headings":"Reassessing Dunn et al. (2024)","what":"Calculating the Metrics","title":"Descriptive Statistics","text":"predictions model stored preds data frame, can now evaluate model fit using choice_mod_eval() function. results stored list objects printed via $desc_stats element. outputs provide quantitative summary model’s performance, interpret following section.","code":"full <- choice_mod_eval(preds$cp_obs, preds$full) no_beta <- choice_mod_eval(preds$cp_obs, preds$no_beta) no_bonus <- choice_mod_eval(preds$cp_obs, preds$no_bonus)  full$desc_stats #>     n r_squared   mean_bias      rmse       mae  median_ae       ccc #> 1 128 0.7731154 0.001752848 0.1373015 0.1069909 0.08329606 0.9040602 no_beta$desc_stats #>     n r_squared   mean_bias      rmse       mae  median_ae      ccc #> 1 128 0.7641972 0.005173756 0.1399739 0.1103887 0.09257077 0.897469 no_bonus$desc_stats #>     n  r_squared  mean_bias      rmse       mae median_ae       ccc #> 1 128 -0.1356889 -0.1854011 0.3071867 0.2349005 0.1789208 0.5844115"},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"conclusion","dir":"Articles","previous_headings":"Reassessing Dunn et al. (2024)","what":"Conclusion","title":"Descriptive Statistics","text":"reanalysis, \\(R^2\\) value full model (0.77) slightly lower originally reported value 0.84 (Dunn et al., 2024), value -\\(\\beta\\) model (0.76 vs. 0.82). -bonus model shows greatest discrepancy: previously reported 0.48, now yields negative \\(R^2\\) -0.14, indicating performs worse null model simply predicts mean observed values. Although negative \\(R^2\\) values may seem counterintuitive, can arise evaluation nonlinear models, \\(R^2\\) longer equivalent squared Pearson correlation coefficient. Dunn et al. used version \\(R^2\\) based linear regression, equivalence holds, discrepancy. mean bias values distinguish models: full -\\(\\beta\\) models exhibit negligible bias—suggesting systematic - underprediction—-bonus model shows clear underprediction choice proportions. RMSE MAE metrics reinforce patterns. full -\\(\\beta\\) models, average prediction errors fall within approximately 10–14 percentage points, indicating reasonably good fit. contrast, -bonus model exhibits substantially larger errors, deviations averaging upwards 30 percentage points. Additionally, discrepancy mean median absolute error -bonus model also suggests outliers problem . CCC offers complementary perspective. full -\\(\\beta\\) models show strong concordance predicted observed values (0.904 0.897), whereas -bonus model’s CCC (0.584) reflects substantially poorer agreement, consistent performance metrics. Taken together, results support interpretation offered Dunn et al. (2024): inclusion \\(\\beta\\) term yields modest consistent improvements predictive accuracy. effect small, consistent intended role fine-tuning mechanism rather core driver choice behaviour. Thus, limited impact taken evidence theoretical relevance.","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"visual-summary","dir":"Articles","previous_headings":"Reassessing Dunn et al. (2024)","what":"Visual Summary","title":"Descriptive Statistics","text":"plot shows predicted versus observed choice proportions model, along fitted regression lines 1:1 identity line reference.","code":"library(tidyverse)  # Convert to long/tidy format preds_long <- preds |>   pivot_longer(     cols = c(full, no_bonus, no_beta),     names_to = \"model\",     values_to = \"cp_pred\"   ) |>   # Factor data and re-label   mutate(model = factor(model,     levels = c(\"full\", \"no_beta\", \"no_bonus\"),     labels = c(\"Full\", \"No β\", \"No Bonus\")   ))  ggplot(preds_long, aes(x = cp_pred, y = cp_obs)) +   geom_abline(intercept = 0, slope = 1, linetype = 3) +   geom_point(shape = 1, stroke = 0.5) +   geom_smooth(method = \"lm\", se = FALSE) +   facet_wrap(~model) +   labs(     x = \"Predicted Choice Proportion\",     y = \"Observed Choice Proportion\"   ) +   theme_bw() +   theme(panel.spacing.x = unit(1.125, \"lines\"))"},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Descriptive Statistics","text":"present vignette focuses descriptive fit metrics (e.g., \\(R^2\\), RMSE, MAE, CCC), choice_mod_eval() function also returns information-theoretic outputs via $info_criteria element. include log-likelihoods, AIC, BIC values based beta-distributed error model—tools especially useful model comparison formal model selection. detailed discussion likelihood-based methods, including theoretical justification examples, see companion vignette: 📘 Model Evaluation: Information-Theoretic Statistics","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_descriptive.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Descriptive Statistics","text":"Dunn, R. M., Pisklak, J. M., McDevitt, M. ., & Spetch, M. L. (2024). Suboptimal choice: review quantification signal good news (SiGN) model. Psychological Review. 131(1), 58-78. https://doi.org/10.1037/rev0000416 Kvålseth, T. O. (1985). Cautionary Note R2. American Statistician, 39(4), 279–285. https://doi.org/10.2307/2683704 Spetch, M. L., & Dunn, R. M. (1987). Choice reliable unreliable outcomes: Mixed percentage-reinforcement concurrent chains. Journal Experimental Analysis Behavior, 47 (1), 57–72. https://doi.org/10.1901/jeab.1987.47-57 Spiess, .-N., & Neumeyer, N. (2010). evaluation R2 inadequate measure nonlinear models pharmacological biochemical research: Monte Carlo approach. BMC Pharmacology, 10(1), Article 6. https://doi.org/10.1186/1471-2210-10-6","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"general-usage","dir":"Articles","previous_headings":"","what":"General Usage","title":"Information-Theoretic Statistics","text":"compute information-theoretic model evaluation metrics using choice_mod_eval(), three inputs required: vector observed choice proportions; vector predicted choice proportions model; integer k indicating number free parameters used model generated predictions. optional epsilon value may also specified bound predictions away 0 1; discussed detail later. called, returns list containing three components: $desc_stats: data frame containing descriptive fit metrics described (e.g., mean bias, RMSE, MAE, CCC, etc.). discussed detail companion article Model Evaluation: Descriptive Statistics. $info_criteria: data frame containing information-theoretic model comparison metrics (e.g., log-likelihood, AIC, BIC) based beta-distributed error model. $residuals: vector residuals (.e., observed minus predicted values), provided convenience case users wish conduct additional analyses visualizations. illustrate metrics can inform model comparison, begin revisiting real-world case study Dunn et al. (2024).","code":"choice_mod_eval(observed, predicted, k = 0, epsilon = 0.001, ...)"},{"path":[]},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"background","dir":"Articles","previous_headings":"Reassessing Dunn et al. (2024)","what":"Background","title":"Information-Theoretic Statistics","text":"described companion article (Model Evaluation: Descriptive Statistics), Dunn et al. (2024) evaluated model performance using \\(R^2\\) values derived linear regressions observed versus predicted choice proportions. analysis applied full SiGN model well two simplified variants: one omitting model’s \\(\\beta\\) term, one excluding bonus delay reduction component. addition reporting \\(R^2\\) values, original analysis included Bayes Factors derived regression-based log-likelihoods. vignette, use SiGN R package demonstrate principled approach—grounded likelihood theory model complexity penalties—comparing models using information-theoretic tools.","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"generating-the-models-and-their-predictions","dir":"Articles","previous_headings":"","what":"Generating the Models and Their Predictions","title":"Information-Theoretic Statistics","text":"begin generating predictions three model variants evaluated Dunn et al. (2024): full SiGN model, includes terms; -β variant, \\(\\beta\\) parameter disabled (removing influence weighting conditional vs. terminal reinforcement); -bonus variant, model omits bonus delay reduction component defines suboptimal choice scenarios SiGN framework. subopt_avian data set included package contains necessary parameters compute model predictions. row represents different experimental condition, columns 9–24 provide required model inputs. compute predictions three model variants: -bonus model, predictions constructed manually excluding delay reduction mechanism. yields model equivalent proposed Spetch & Dunn (1987). Finally, convenience, store observed predicted choice proportions data frame named preds: predictions serve input evaluating model fit using information-theoretic criteria sections follow.","code":"library(SiGN)  # Construct model input list params <- do.call(choice_params, as.list(subopt_avian[9:24])) # Full model predictions full <- SiGN(params)$details  # No beta model predictions params$beta_toggle = FALSE no_beta <- SiGN(params)$details # No bonus model (without bonus delay reduction term) no_bonus <- (full$r_a * full$dr_avg_a) /   ((full$r_a * full$dr_avg_a) + (full$r_b * full$dr_avg_b))  # Apply boundary conditions cond_1 <- full$dr_avg_a > 0 & full$dr_avg_b < 0 cond_0 <- full$dr_avg_a < 0 & full$dr_avg_b > 0  # Enforce deterministic outcomes for certain boundary cases no_bonus <- ifelse(cond_1 == TRUE, 1,   ifelse(cond_0 == TRUE, 0, no_bonus) ) # Combine observed and predicted choice proportions into a data frame preds <- data.frame(   cp_obs = subopt_avian$cp,   full = full$cp,   no_bonus = no_bonus,   no_beta = no_beta$cp )"},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"the-error-model","dir":"Articles","previous_headings":"","what":"The Error Model","title":"Information-Theoretic Statistics","text":"original SiGN model, reported Dunn et al. (2024), contains free parameters. , lacks internal mechanism fitting data. enable likelihood-based comparisons three model variants, must introduce statistical assumption distribution errors—, observed outcomes might deviate model’s predictions. original analysis, Dunn et al. used \\(R^2\\) values derived linear regressions observed versus predicted values descriptive measure fit. approach implicitly assumes residuals normally distributed homoscedastic: \\[ \\varepsilon_i = y_i - \\hat{y_i} \\sim \\mathcal{N}(0, \\sigma^2) \\] follows observed values normally distributed around predicted values: \\[ y_i \\sim \\mathcal{N}(\\hat{y}_i, \\sigma^2) \\] \\(\\varepsilon_i\\): residual \\(y_i\\) = observed choice proportion row \\(\\) subopt_avian. \\(\\hat{y}_i\\) = model-predicted choice proportion. \\(\\sigma^2\\) = unknown error variance estimated residuals. assumption widespread—statistical analyses generally, also within suboptimal choice literature, choice proportions often analysed using t-tests ANOVAs, rely assumption normally distributed errors. However, can problematic outcome variable proportion bounded 0 1. normal distribution infinite support assigns nonzero probability impossible values (.e., 0 1), making poor match bounded data like choice proportions. addition, choice data often exhibit non-constant variance (heteroscedasticity): predictions near 0 1 tend smaller variability, predictions around 0.5 allow greater spread. Normal models assume homoscedasticity (constant variance), may hold . especially true suboptimal choice paradigm, empirical proportions often take extreme values—exactly 0 1—straining normality assumption. natural alternative Beta distribution, defined interval (0, 1). also highly flexible: depending parameters, can take uniform, bell-shaped, U-shaped, skewed forms. Beta distribution typically parameterised two shape parameters, \\(\\alpha\\) \\(\\beta\\): \\[ y_i \\sim \\text{Beta}(\\alpha_i,\\ \\beta_i) \\] unfortunately introduces potential confusion, SiGN model also includes parameter called \\(\\beta\\)—two unrelated. error model, assume observed choice proportion \\(y_i\\) arises Beta distribution centered around SiGN model’s prediction (.e., \\(\\mu_i = \\hat{y}_i\\)), constant precision \\(\\phi\\). assumption, two shape parameters become: \\[ \\alpha_i = \\mu_i \\cdot \\phi, \\quad \\beta_i = (1 - \\mu_i) \\cdot \\phi \\] error model can written specifically : \\[ y_i \\sim \\text{Beta}(\\mu_i \\cdot \\phi,\\ (1 - \\mu_i) \\cdot \\phi) \\] \\(y_i\\): observed choice proportion. \\(\\mu_i\\): SiGN model’s-predicted choice proportion. \\(\\phi\\): precision parameter (shared across data points). formulation reframes error residual, variability around prediction. observation treated random draw Beta distribution whose mean SiGN model’s prediction. spread distribution reflects uncertainty fit: \\(\\phi\\) large, predictions tightly clustered around \\(\\mu_i\\); small, distribution diffuse.","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"visualising-beta-error-shapes","dir":"Articles","previous_headings":"The Error Model","what":"Visualising Beta Error Shapes","title":"Information-Theoretic Statistics","text":"illustrate shape Beta distribution changes prediction \\(\\mu\\), plot shows simulated distributions five representative choice proportion values. \\(\\mu = 0.1\\), distribution strongly positively skewed (floor effect). \\(\\mu = 0.5\\), distribution symmetric. Near \\(\\mu = 0.9\\), pattern reverses, increasing negative skew.  behaviour underscores strength Beta distribution error model: respects bounds proportion data, accommodates skew, adapts mean-dependent variance. contrast, normal model assumes symmetric, unbounded, homoscedastic errors—assumptions often violated behavioural data.","code":"library(tidyverse)  # Parameters mu <- c(0.1, 0.25, 0.5, 0.75, 0.9) phi <- 10 # arbitary value n <- 1e5  # Simulate Beta samples err_vals <- data.frame(   value = c(     rbeta(n, mu[1] * phi, (1 - mu[1]) * phi),     rbeta(n, mu[2] * phi, (1 - mu[2]) * phi),     rbeta(n, mu[3] * phi, (1 - mu[3]) * phi),     rbeta(n, mu[4] * phi, (1 - mu[4]) * phi),     rbeta(n, mu[5] * phi, (1 - mu[5]) * phi)   ),   mu = rep(mu, each = n) )  # Plot ggplot(err_vals, aes(x = value)) +   geom_histogram() +   facet_wrap(~mu,     nrow = 1,     labeller = label_bquote(mu == .(as.character(mu)))   ) +   labs(     title = \"Illustrating the Flexibility of the Beta Distribution\",     x = \"Simulated Choice Proportion\",     y = \"Count\"   ) +   theme_bw() +   theme(panel.spacing.x = unit(1.125, \"lines\"))"},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"how-variance-changes-with-the-mean","dir":"Articles","previous_headings":"The Error Model","what":"How Variance Changes with the Mean","title":"Information-Theoretic Statistics","text":"Beta distribution also exhibits characteristic pattern variance decreases near boundaries (0 1) peaks midpoint (\\(\\mu = 0.5\\)). variance Beta distribution depends mean \\(\\mu\\) precision \\(\\phi\\). mean-dependent variance helps explain Beta model well suited choice data: captures intuition variability greatest choice uncertain (near 0.5) smallest choice near-deterministic (near 0 1). Soch, et al. (2024), variance beta distribution : \\[ \\text{Var}(X) = \\frac{\\alpha\\beta}{(\\alpha + \\beta + 1) \\cdot (\\alpha + \\beta)^2} \\] following plot shows variance changes function \\(\\mu\\), assuming constant \\(\\phi = 10\\):","code":"# Parameters mu <- seq(0.001, 0.999, by = 0.001) phi <- 10 # arbitrary value a <- mu * phi b <- (1 - mu) * phi v <- (a * b) / ((a + b + 1) * (a + b)^2)  ggplot(mapping = aes(x = mu, y = v)) +   geom_line(linewidth = 1) +   labs(     title = \"Beta Distribution Variance vs. Mean\\n(with Φ = 10)\",     x = \"μ\",     y = \"Variance\"   ) +   theme_bw(base_size = 14) +   theme(plot.title = element_text(size = 14))"},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"estimating-a-value-for-phi","dir":"Articles","previous_headings":"The Error Model","what":"Estimating a Value for \\(\\phi\\)","title":"Information-Theoretic Statistics","text":"Beta distribution used error model includes precision parameter, \\(\\phi\\), governs tightly observed values expected cluster around model’s predictions. plays role analogous variance (e.g., \\(\\sigma^2\\)) Gaussian models—except , larger values \\(\\phi\\) imply lower variability. Rather choosing \\(\\phi\\) arbitrarily, estimate data using maximum likelihood estimation. approach finds value \\(\\phi\\) makes observed data probable assumed Beta error model. context, likelihood quantifies well model—given value \\(\\phi\\)—explains observed choice proportions. higher likelihood means better alignment model data. practice, minimise negative log-likelihood, simplifies optimisation improves numerical stability. $phi column returned choice_mod_eval() contains estimated value \\(\\phi\\) obtained via method. , walk manual version calculation using full SiGN model.","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"estimating-phi-for-the-full-model-in-r","dir":"Articles","previous_headings":"The Error Model > Estimating a Value for \\(\\phi\\)","what":"Estimating \\(\\phi\\) for the Full Model in R","title":"Information-Theoretic Statistics","text":"estimating \\(\\phi\\), small technical complication arises Beta distribution: specifically, defined values strictly 0 1. observed predicted choice proportions allowed include values boundaries (e.g., 0 1), need apply continuity correction ensure numerical stability. adjustment used likelihood calculations—original values retained elsewhere. subopt_avian dataset, observed proportions often come close 0 1 actually reach . However, SiGN model’s predictions occasionally reach . Thus, future-proof code, apply continuity correction observed predicted values. code ensures observed predicted value smaller epsilon = 0.001 larger 1 - epsilon = 0.999: pmax(preds$cp_obs, epsilon) replaces values less 0.001 0.001 pmin(..., 1 - epsilon) caps values 0.999 0.999 correction applied purposes likelihood estimation. unadjusted values preserved computations outputs. worth noting choice epsilon can strongly influence log-likelihood, especially predicted observed values near boundaries (0 1). Users encouraged check sensitivity output different epsilon values. said, applications involving behavioural data, default epsilon = 0.001 likely reasonable. Next, define negative log-likelihood function Beta distribution use R’s optimize() function find value \\(\\phi\\) minimises : mentioned earlier, estimated \\(\\phi\\) quantifies model’s precision Beta error model—, tightly observed values cluster around predictions full SiGN model. higher value suggests observed choice proportions tightly clustered around predicted values, lower value indicates greater variability model misfit.","code":"epsilon <- 0.001 y <- pmin(pmax(preds$cp_obs, epsilon), 1 - epsilon) mu <- pmin(pmax(preds$full, epsilon), 1 - epsilon) # Define negative log-likelihood neg_loglik <- function(phi, y, mu) {   alpha <- mu * phi   beta <- (1 - mu) * phi   -sum(dbeta(y, alpha, beta, log = TRUE)) }  # Estimate phi using MLE optim_result <- optimize(neg_loglik, interval = c(1, 200), y = y, mu = mu) phi_est <- optim_result$minimum phi_est #> [1] 8.698582"},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"computing-the-total-log-likelihood","dir":"Articles","previous_headings":"","what":"Computing the Total Log-Likelihood","title":"Information-Theoretic Statistics","text":"’ve estimated optimal value \\(\\phi\\) can compute total log-likelihood, quantifies well model—given predictions fitted precision parameter—accounts observed data. Specifically, observed value \\(y_i\\), evaluate logarithm Beta probability density function, using model’s predicted mean \\(\\mu_i\\) shape parameters derived \\(\\phi\\). Summing values across observations yields total log-likelihood: \\[ \\log L = \\sum \\log[\\text{Beta}(y_i | \\alpha_i, \\beta_i)] \\] $logLik column returned choice_mod_eval() reports value automatically. , replicate calculation manually full model, using corrected predictions (mu) observed values (y) earlier: total log-likelihood represents joint plausibility observed data full SiGN model fitted \\(\\phi\\). foundational quantity information-theoretic metrics like AIC BIC derived.","code":"# Function to compute total log-likelihood given mu, y, and phi compute_loglik <- function(mu_raw, y, phi) {   alpha <- mu * phi   beta <- (1 - mu) * phi   sum(dbeta(y, alpha, beta, log = TRUE)) }  LL_full <- compute_loglik(preds$full, y, phi_est) LL_full #> [1] -16.70615"},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"comparing-the-models","dir":"Articles","previous_headings":"","what":"Comparing the Models","title":"Information-Theoretic Statistics","text":"log-likelihood values can used compare well model accounts data, principled approach use Akaike Information Criterion (AIC) Bayesian Information Criterion (BIC). metrics derived model’s total log-likelihood, also include penalties model complexity—discouraging overfitting. BIC imposes stronger penalty AIC. context, “model complexity” measured number free parameters \\(k\\). equations AIC BIC : \\[ \\begin{aligned} \\text{AIC} &= 2k - 2\\log L \\\\ \\text{BIC} &= \\log(n) \\cdot k - 2\\log L \\end{aligned} \\] \\(\\log L\\) log-likelihood. \\(k\\) number estimated parameters (1 case). \\(n\\) number observations. Although none three models include free parameters predictive structure, precision parameter \\(\\phi\\) Beta error model estimated data. means , likelihood-based model comparison, model effectively treated one free parameter. \\(k = 1\\) three models, penalty terms \\(2k\\) (AIC) \\(\\log(n) \\cdot k\\) (BIC) constant across models affect relative rankings. cases, model selection based AIC, BIC, log-likelihood alone lead conclusions.","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"extracting-likelihood-information","dir":"Articles","previous_headings":"Comparing the Models","what":"Extracting Likelihood Information","title":"Information-Theoretic Statistics","text":"code applies choice_mod_eval() function obtain log-likelihood, AIC, BIC values model. Although pass k = 0 function, implementation automatically adds 1 internally account estimated precision parameter \\(\\phi\\). design allows users supply k number parameters predictive model , keeping error model assumption consistent. Thus, users limited evaluating SiGN model—function can applied model produces predictions (0, 1) interval, logistic regression, reinforcement learning models, proportion-based models. ⚠️ Caveat: predictive model provide expected value (.e., mean structure), incorporate stochastic error model. model already simulates embeds variability (e.g., sampling outcomes including likelihood), layering additional Beta error model top may inappropriate, assumptions choice_mod_eval() longer hold.","code":"full <- choice_mod_eval(preds$cp_obs, preds$full, k = 0) no_beta <- choice_mod_eval(preds$cp_obs, preds$no_beta, k = 0) no_bonus <- choice_mod_eval(preds$cp_obs, preds$no_bonus, k = 0)  full$info_criteria     # full model #>   n_parameters      phi    logLik      AIC      BIC #> 1            1 8.698582 -16.70615 35.41229 38.26432 no_beta$info_criteria  # no-beta model #>   n_parameters      phi    logLik      AIC      BIC #> 1            1 8.505385 -18.04257 38.08513 40.93716 no_bonus$info_criteria # no-bonus model #>   n_parameters      phi    logLik      AIC      BIC #> 1            1 2.387355 -212.1828 426.3657 429.2177"},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"bayes-factors","dir":"Articles","previous_headings":"Comparing the Models","what":"Bayes Factors","title":"Information-Theoretic Statistics","text":"log-likelihood, AIC, BIC can used compare well models account data, often helpful convert metrics interpretable scale. One approach Bayes Factor (BF), expresses relative evidence one model another. instance: model largest log-likelihood fits best. model smallest AIC BIC preferred. magnitude differences difficult interpret directly. Bayes Factors solve transforming difference BIC scores ratio support: \\[ \\text{BF}_{01} \\approx \\exp(\\frac{1}{2}(\\text{BIC}_1 - \\text{BIC}_0)) \\] : \\(\\text{BIC}_0\\): BIC value reduced version SiGN model (.e., bonus beta versions). \\(\\text{BIC}_1\\): BIC value full SiGN model. formulation yields \\(\\text{BF}_{01}\\), evidence favour reduced model. Taking reciprocal gives “inverse Bayes Factor” (\\(\\text{BF}_{10}\\)), , context, shows evidence favour full model: \\[ \\text{BF}_{10} = \\frac{1}{\\text{BF}_{01}} \\] \\(BF_{10} > 1\\) indicates support full model, larger values implying stronger evidence. following table provides interpretive scale Bayes Factors, based Jeffreys (1961): Jeffreys (1961) Interpretation Inverse Bayes Factor (BF₁₀)","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"computing-bayes-factors-from-bic","dir":"Articles","previous_headings":"Comparing the Models > Bayes Factors","what":"Computing Bayes Factors from BIC","title":"Information-Theoretic Statistics","text":"start storing BIC values model ease use:","code":"bic_full <- full$info_criteria$BIC bic_no_beta <- no_beta$info_criteria$BIC bic_no_bonus <- no_bonus$info_criteria$BIC"},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"comparison-full-model-vs--no-beta-model","dir":"Articles","previous_headings":"Comparing the Models > Bayes Factors > Computing Bayes Factors from BIC","what":"Comparison: Full Model vs. No-\\(\\beta\\) Model","title":"Information-Theoretic Statistics","text":"inverse Bayes Factor (3.81) shows good positive evidence inclusion SiGN model’s \\(\\beta\\) term.","code":"# BIC_1 = full, BIC_0 = no beta BF_01 <- exp((bic_full - bic_no_beta) / 2) BF_10 <- 1 / BF_01 # Evidence for full over no-beta BF_10 #> [1] 3.805395"},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"comparison-full-model-vs--no-bonus-model","dir":"Articles","previous_headings":"Comparing the Models > Bayes Factors > Computing Bayes Factors from BIC","what":"Comparison: Full Model vs. No-Bonus Model","title":"Information-Theoretic Statistics","text":"inverse Bayes Factor (> 100) shows decisive evidence inclusion bonus delay-reduction model. face value, result like 7.84247e+84 may appear absurdly large, mathematical property Bayes Factors: computed exponentiating half difference BIC, even moderate BIC differences can yield large values. results errors—simply reflect overwhelming support one model log-probability scale.","code":"# BIC_1 = full, BIC_0 = no bonus BF_01 <- exp((bic_full - bic_no_bonus) / 2) BF_10 <- 1 / BF_01 # Evidence for full over no bonus BF_10 #> [1] 7.84247e+84"},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"conclusion","dir":"Articles","previous_headings":"Comparing the Models","what":"Conclusion","title":"Information-Theoretic Statistics","text":"comparisons, full SiGN model preferred—especially -bonus variant, evidence overwhelming. Although Dunn et al. (2024) relied less appropriate analytical method—using regressions observed versus predicted values—qualitative conclusion ultimately correct: full model offers best account data. said, method overstated evidence including \\(\\beta\\) term. Bayes Factor analysis presented reveals modest consistent advantage. Still, noted companion article (Model Evaluation: Descriptive Statistics), role \\(\\beta\\) never expected produce dramatic shifts model’s predictions. relatively subtle effect taken evidence conceptual relevance.","code":""},{"path":"https://sign-r.github.io/SiGN/articles/eval_info-theoretic.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Information-Theoretic Statistics","text":"Dunn, R. M., Pisklak, J. M., McDevitt, M. ., & Spetch, M. L. (2024). Suboptimal choice: review quantification signal good news (SiGN) model. Psychological Review. 131(1), 58-78. https://doi.org/10.1037/rev0000416 Jeffreys, H. (1948). Theory probability (2nd Ed.). Oxford Soch, et al. (2024). Book Statistical Proofs (Version 2023). https://doi.org/10.5281/ZENODO.4305949","code":""},{"path":"https://sign-r.github.io/SiGN/articles/squires_fantino.html","id":"reproducing-predictions-from-fantino-1969","dir":"Articles","previous_headings":"","what":"Reproducing Predictions from Fantino (1969)","title":"Classic Concurrent-Chains","text":"example, consider contingencies used Fantino’s (1969) seminal paper (diagrammed Figure 1), designed illustrate delay reduction can conditionally reinforce choice behaviour (Fantino, 1969). setup, initial link leads single terminal link, terminal reinforcement always delivered schedule requirements met. parameters required model arrangement already stored built-\"fantino\" profile. SiGN() function assumes two terminal links per alternative default, second terminal link side effectively deactivated setting duration entry probability zero (.e., tl_dur_a2, tl_dur_b2, tl_p_a2, tl_p_b2 set 0). Running model yields following prediction: … can see obtain choice proportion 0.9, Fantino predicted original delay reduction hypothesis (Fantino, 1969).","code":"library(SiGN) fantino_1969 <- choice_params(\"fantino\", display_params = TRUE) #>   il_dur_a il_dur_b tl_dur_a1 tl_dur_a2 tl_dur_b1 tl_dur_b2 tl_p_a1 tl_p_a2 #> 1       90       30        30         0        90         0       1       0 #>   tl_p_b1 tl_p_b2 tr_p_a1 tr_p_a2 tr_p_b1 tr_p_b2 il_sched_a il_sched_b s_delta #> 1       1       0       1       0       1       0         VI         VI       1 #>   beta_log beta_toggle #> 1       10        TRUE SiGN(fantino_1969) #> Predicted Choice Proportion: #> [1] 0.9 #>  #> Use `$details` for additional model terms."},{"path":"https://sign-r.github.io/SiGN/articles/squires_fantino.html","id":"reproducing-predictions-from-squires-and-fantino-1971","dir":"Articles","previous_headings":"","what":"Reproducing Predictions from Squires and Fantino (1971)","title":"Classic Concurrent-Chains","text":"key feature SiGN model rely solely delay reduction predict choice behaviour. Instead, incorporates approach proposed Squires Fantino (1971), delay reduction multiplied rate terminal reinforcement. classic concurrent-chain arrangements—single, deterministic terminal link outcome per alternative—formulation yields predictions align exactly . Using SiGN package, can reproduce model predictions presented Figure 1 Squires Fantino’s (1971) paper. predictions illustrate changes initial link (IL) duration influence choice behaviour classic concurrent-chain arrangements. one example, Squires Fantino compared chains identical terminal links (TLs) different fixed IL durations: Chain VI\\(x\\) VI30 versus Chain VI\\(x\\) VI90. another example, comparison Chain VI60 VI15 Chain VI\\(x\\) VI15. , terminal links held constant (15 s sides), initial link duration one alternative manipulated. Critically, prediction based purely delay reduction predict indifference (0.5) situation two terminal links represent degree improvement terminal reinforcement. highlights significance Squires Fantino’s (1971) extension delay-reduction model, incorporates delay-reduction reinforcement rate explain preference.  plot shows SiGN model reproduces patterns reported Squires Fantino (1971), illustrating SiGN integrates delay-reduction terminal reinforcement rate account classic choice behaviour, replicating foundational findings early concurrent-chain research.","code":"# Squires and Fantino: VIx VI30 vs VIx VI90 sf_1_params <- choice_params(\"fantino\",   il_dur_a = seq(1, 600, 0.1),   il_dur_b = seq(1, 600, 0.1) ) # Squires and Fantino: VI60 VI15 vs VIx VI15 sf_2_params <- choice_params(    # Initial link (il) duration (dur)   il_dur_a = 60,   il_dur_b = seq(1, 600, 0.1),    # Terminal link (tl) duration (dur)   tl_dur_a1 = 15, tl_dur_a2 = 0,   tl_dur_b1 = 15, tl_dur_b2 = 0,    # Terminal link (tl) entry probability (p)   tl_p_a1 = 1, tl_p_a2 = 0,   tl_p_b1 = 1, tl_p_b2 = 0,    # Terminal reinforcement (tr) probability (p)   tr_p_a1 = 1, tr_p_a2 = 0,   tr_p_b1 = 1, tr_p_b2 = 0,    # Schedules   il_sched_a = \"VI\",   il_sched_b = \"VI\", ) # Generate SiGN Prediction sf_1 <- SiGN(sf_1_params)$details sf_2 <- SiGN(sf_2_params)$details # Data frame for plot plot_data <- data.frame(   cp = c(sf_1$cp, sf_2$cp),   il_durs = rep(seq(1, 600, 0.1), 2),   Contingency = c(     rep(\"VIx VI30 vs VIx VI90\", nrow(sf_1)),     rep(\"VI60 VI15 vs VIx VI15\", nrow(sf_2))   ) ) # Plot library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.2     ✔ tibble    3.3.0 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.1.0      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors  ggplot(   plot_data,   aes(     x = il_durs,      y = cp,     colour = Contingency,      linetype = Contingency   ) ) +   # Add horizontal reference line at 0.5 (chance level)   geom_hline(yintercept = 0.5, linetype = 3) +      # Plot predicted lines   geom_line(linewidth = 1) +      # Custom colour palette   scale_colour_manual(values = palette.colors(palette = \"Dark 2\")) +      # Restrict y-axis to [0, 1]   coord_cartesian(ylim = c(0, 1)) +      # Axis labels   labs(     x = \"Duration of Initial Links in Seconds (x)\",     y = \"Predicted Choice Proportion\"   ) +      # Base theme   theme_bw(base_size = 12) +      # Additional styling and legend placement   theme(     axis.text = element_text(colour = \"black\"),     legend.position = \"inside\",     legend.position.inside = c(0.75, 0.2),     legend.background = element_rect(fill = \"transparent\"),     legend.key = element_rect(fill = \"transparent\"),     legend.text = element_text(size = 8),     legend.title = element_text(size = 10)   )"},{"path":"https://sign-r.github.io/SiGN/articles/squires_fantino.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Classic Concurrent-Chains","text":"Fantino, E. (1969). Choice rate reinforcement. Journal Experimental Analysis Behavior, 12(5), 723–730. https://doi.org/10.1901/jeab.1969.12-723 Squires, N., & Fantino, E. (1971). model choice simple concurrent concurrent-chains schedules. Journal Experimental Analysis Behavior, 15(1), 27–38. https://doi.org/10.1901/jeab.1971.15-27","code":""},{"path":"https://sign-r.github.io/SiGN/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeffrey Pisklak. Author, maintainer. Roger Dunn. Author. Margaret McDevitt. Author. Marcia Spetch. Author.","code":""},{"path":"https://sign-r.github.io/SiGN/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pisklak J, Dunn R, McDevitt M, Spetch M (2025). SiGN: Signal Good News Model R Package. doi:10.5281/zenodo.15955616, Version 0.0.0.9000, https://jpisklak.github.io/SiGN.","code":"@Manual{,   title = {SiGN: Signal for Good News Model R Package},   author = {Jeffrey Pisklak and Roger Dunn and Margaret McDevitt and Marcia Spetch},   year = {2025},   note = {Version 0.0.0.9000},   url = {https://jpisklak.github.io/SiGN},   doi = {10.5281/zenodo.15955616}, }"},{"path":"https://sign-r.github.io/SiGN/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Signal for Good News Model R Package","text":"Designed researchers behavioural science, SiGN R package applies Signal Good News (SiGN) model predict choice behaviour operant conditioning settings.","code":""},{"path":"https://sign-r.github.io/SiGN/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Signal for Good News Model R Package","text":"can install SiGN’s development version GitHub : load package :","code":"install.packages(\"pak\") pak::pak(\"https://github.com/SiGN-R/SiGN\") library(SiGN)"},{"path":"https://sign-r.github.io/SiGN/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Signal for Good News Model R Package","text":"get started package, begin reading Get Started article, introduces core functionality SiGN package. , explore following articles see uses package: Re-analyzes classic concurrent-chain experiments using SiGN predictions, shows generate predictions across range parameter values. Demonstrates generate model predictions batch data frame input parameters. advanced use case involving model evaluation, see following: Introduces metrics RMSE, MAE, Lin’s Concordance Coefficient assessing model performance. Describes compare choice models generally (just SiGN model) using likelihood-based metrics AIC, BIC, Bayes Factors.","code":""},{"path":"https://sign-r.github.io/SiGN/index.html","id":"ready-to-use-suboptimal-choice-data-and-profiles","dir":"","previous_headings":"","what":"Ready-to-Use Suboptimal Choice Data and Profiles","title":"Signal for Good News Model R Package","text":"package includes: Built-datasets — Two curated datasets Dunn et al. (2024): subopt_full: complete dataset suboptimal choice studies. subopt_avian: filtered subset focused pigeons starlings. Built-parameter profiles — Predefined setups well-known procedures literature, including: \"zentall\" (Stagner Zentall, 2010) \"kendall\" (Kendall, 1985) \"fantino\" (Fantino, 1969) Fully vectorised parameter input — model parameters can customised passed vectors, enabling efficient simulation multiple conditions.","code":""},{"path":"https://sign-r.github.io/SiGN/index.html","id":"try-the-package-without-installing-r","dir":"","previous_headings":"","what":"Try the Package Without Installing R","title":"Signal for Good News Model R Package","text":"can generate predictions SiGN model browser using free, interactive SiGN Calculator — installation coding required. Set custom choice scenarios instantly view predicted preferences model diagnostics. ’s great way explore delay reduction reinforcement schedules influence decision-making. 📎 ideal students, collaborators, researchers want explore model without writing code.","code":""},{"path":"https://sign-r.github.io/SiGN/index.html","id":"planned-features","dir":"","previous_headings":"","what":"Planned Features","title":"Signal for Good News Model R Package","text":"SiGN package active development. Upcoming updates expand capabilities support generalised version SiGN model incorporates free parameters model fitting comparison. Additional tools model evaluation, simulation, visualisation also considered. Stay tuned updates, feel free suggest features contribute!","code":""},{"path":"https://sign-r.github.io/SiGN/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Signal for Good News Model R Package","text":"Dunn, R. M., Pisklak, J. M., McDevitt, M. ., & Spetch, M. L. (2024). Suboptimal choice: review quantification signal good news (SiGN) model. Psychological Review. 131(1), 58-78. https://doi.org/10.1037/rev0000416 Fantino, E. (1969). Choice rate reinforcement. Journal Experimental Analysis Behavior, 12(5), 723–730. https://doi.org/10.1901/jeab.1969.12-723 Kendall, S. B. (1985). study choice percentage reinforcement. Behavioural Processes, 10(4), 399–413. https://doi.org/10.1016/0376-6357(85)90040-3 Stagner, J. P., & Zentall, T. R. (2010). Suboptimal choice behavior pigeons. Psychonomic Bulletin & Review, 17(3), 412–416. https://doi.org/10.3758/PBR.17.3.412","code":""},{"path":"https://sign-r.github.io/SiGN/reference/SiGN.html","id":null,"dir":"Reference","previous_headings":"","what":"SiGN Model Prediction — SiGN","title":"SiGN Model Prediction — SiGN","text":"Computes predicted choice proportions using SiGN (Signals Good News) model, based input parameters describing reinforcement schedules, stimulus durations, signalling conditions.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/SiGN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SiGN Model Prediction — SiGN","text":"","code":"SiGN(params)"},{"path":"https://sign-r.github.io/SiGN/reference/SiGN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SiGN Model Prediction — SiGN","text":"params named list model parameters, typically created choice_params(). list must include required values initial terminal link durations, terminal link entry reinforcement probabilities, schedule types. See choice_params() complete description required elements.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/SiGN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SiGN Model Prediction — SiGN","text":"object class \"SiGN\", includes: cp: numeric vector predicted choice proportions. details: data frame containing intermediate model components reinforcement rates, delay reductions, beta values, signalling status.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/SiGN.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SiGN Model Prediction — SiGN","text":"Specifics calculation can found Dunn et al. (2024).","code":""},{"path":"https://sign-r.github.io/SiGN/reference/SiGN.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SiGN Model Prediction — SiGN","text":"Dunn, R. M., Pisklak, J. M., McDevitt, M. ., & Spetch, M. L. (2024). Suboptimal choice: review quantification signal good news (SiGN) model. Psychological Review. 131(1), 58-78. https://doi.org/10.1037/rev0000416","code":""},{"path":"https://sign-r.github.io/SiGN/reference/SiGN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SiGN Model Prediction — SiGN","text":"","code":"# Standard FR 1 Initial Links params <- choice_params(profile = \"zentall\") result <- SiGN(params) result$cp       # predicted choice proportion #> [1] 0.9590059 result$details  # access intermediate terms #>          cp        r_a        r_b r_a_com r_b_com    Big_T     cr_a      cr_b #> 1 0.9590059 0.05263158 0.04545455      NA      NA 21.14286 11.54496 0.5714286 #>   dr_avg_a  dr_avg_b dr_bonus_a dr_bonus_b   beta_a beta_b sig_a sig_b tr_p_a #> 1 1.428571 0.5714286   9.714286          0 1.041393      1  TRUE FALSE    0.2 #>   tr_p_b s_delta beta_log #> 1    0.5       1       10  # Long VI 30 Initial Links params <- choice_params(profile = \"zentall\",   il_dur_a = 30, il_dur_b = 30, il_sched_a = \"VI\", il_sched_b = \"VI\") result <- SiGN(params) result$cp #> [1] 0.3070095 result$details #>          cp         r_a    r_b    r_a_com r_b_com    Big_T     cr_a     cr_b #> 1 0.3070095 0.006097561 0.0125 0.01123596    0.02 61.14286 18.68283 20.57143 #>   dr_avg_a dr_avg_b dr_bonus_a dr_bonus_b    beta_a beta_b sig_a sig_b tr_p_a #> 1 9.428571 20.57143   41.71429          0 0.2218487      1  TRUE FALSE    0.2 #>   tr_p_b s_delta beta_log #> 1    0.5       1       10"},{"path":"https://sign-r.github.io/SiGN/reference/SiGN_gen_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Generalised SiGN Model and Evaluate Fit Quality — SiGN_gen_eval","title":"Fit a Generalised SiGN Model and Evaluate Fit Quality — SiGN_gen_eval","text":"function fits generalised version SiGN model observed choice proportions using non-linear least squares via nlsLM(), evaluates model fit using descriptive likelihood-based metrics. beta-distributed error model used estimate log-likelihood compute AIC BIC values. model includes three free parameters: bias (b), sensitivity reinforcement rate (k_r), sensitivity delay reduction (k_d).","code":""},{"path":"https://sign-r.github.io/SiGN/reference/SiGN_gen_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Generalised SiGN Model and Evaluate Fit Quality — SiGN_gen_eval","text":"","code":"SiGN_gen_eval(params, observed, b = 1, k_r = 1, k_d = 1, epsilon = 0.001, ...)"},{"path":"https://sign-r.github.io/SiGN/reference/SiGN_gen_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Generalised SiGN Model and Evaluate Fit Quality — SiGN_gen_eval","text":"params list parameter inputs compatible SiGN() function, output choice_params(). Must length observed. observed numeric vector observed choice proportions, one per condition. Values must lie strictly 0 1. b Starting value bias parameter (default 1). k_r Starting value reinforcement rate sensitivity parameter (default 1). k_d Starting value delay reduction sensitivity parameter (default 1). epsilon small positive value used prevent undefined operations (e.g., division zero). Used computing delay reductions numerical stability likelihood calculations. ... Additional arguments passed internal functions.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/SiGN_gen_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Generalised SiGN Model and Evaluate Fit Quality — SiGN_gen_eval","text":"list class \"SiGN_gen_eval\" following components: param_est data frame estimated model parameters (b, k_r, k_d). desc_stats Descriptive statistics summarizing model fit (e.g., RMSE, R-squared, MAE, CCC). info_criteria data frame estimated phi, total log-likelihood, AIC, BIC. mod_info full model object returned nlsLM(). phi_optim_result result optimize() used estimate beta model precision parameter. residuals Vector residuals (observed minus predicted choice proportions). details data frame intermediate values, including predictions components SiGN model.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/SiGN_gen_eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a Generalised SiGN Model and Evaluate Fit Quality — SiGN_gen_eval","text":"function assumes observed choice proportion independent follows beta distribution centred around predicted value generalised SiGN model. single precision parameter (phi) estimated per model fit. AIC BIC based four free parameters (three model, one error distribution). Residual checks recommended. additional details regarding Beta error model, see choice_mod_eval.","code":""},{"path":[]},{"path":"https://sign-r.github.io/SiGN/reference/SiGN_gen_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Generalised SiGN Model and Evaluate Fit Quality — SiGN_gen_eval","text":"","code":"params <- do.call(choice_params, as.list(subopt_avian[9:24])) result <- SiGN_gen_eval(params, subopt_avian$cp, b = 1, k_r = 1, k_d = 1) #> ℹ Default starting values (1, 1, 1) are being used. For better results, consider setting values that match the patterns in your data - poor starting points can trip up the fitting algorithm. print(result) #> $param_est #>          b       k_r       k_d #> b 1.030268 0.8627061 0.6784299 #>  #> $desc_stats #>     n r_squared    mean_bias      rmse        mae  median_ae       ccc #> 1 128 0.7968094 -0.007361284 0.1299345 0.09918741 0.07952289 0.9033226 #>  #> $info_criteria #>   n_parameters      phi   logLik       AIC       BIC #> 1            4 8.165909 10.48557 -12.97115 -1.563027"},{"path":"https://sign-r.github.io/SiGN/reference/beta_sig.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the β (beta) parameter for the SiGN model — beta_sig","title":"Compute the β (beta) parameter for the SiGN model — beta_sig","text":"Computes β adjustment signalled alternatives, reflecting balance conditional terminal (.e., primary/unconditional) reinforcement, described Equation 6 Dunn et al. (2024).","code":""},{"path":"https://sign-r.github.io/SiGN/reference/beta_sig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the β (beta) parameter for the SiGN model — beta_sig","text":"","code":"beta_sig(   use_beta,   sig,   sched1,   sched2,   il_dur1,   il_dur2,   s_plus_dur,   base = 10 )"},{"path":"https://sign-r.github.io/SiGN/reference/beta_sig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the β (beta) parameter for the SiGN model — beta_sig","text":"use_beta Logical vector indicating whether β parameter applied. sig Logical vector indicating whether alternative signalled. See sig_check. sched1 Character vector indicating schedule type first alternative's initial link. See Details. (e.g., \"VI\", \"FR\"). sched2 Character vector indicating schedule type second alternative's initial link. See Details. il_dur1 Numeric vector durations first alternative's initial link. il_dur2 Numeric vector durations second alternative's initial link. s_plus_dur Numeric vector durations associated alternative 1's \\(S^{+}\\) stimulus. base positive real number specifying base logarithm used β. Defaults 10.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/beta_sig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the β (beta) parameter for the SiGN model — beta_sig","text":"numeric vector containing β values.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/beta_sig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the β (beta) parameter for the SiGN model — beta_sig","text":"Although initial link durations alternatives provided arguments, function computes β specifically first initial link. initial links variable interval (VI) schedules, common initial link duration computed: $$1 / (1 / d_1 + 1 / d_2)$$ Otherwise, duration first initial link used. See choice_params() additional details appropriate schedule selection.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/beta_sig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the β (beta) parameter for the SiGN model — beta_sig","text":"Dunn, R. M., Pisklak, J. M., McDevitt, M. ., & Spetch, M. L. (2024). Suboptimal choice: review quantification signal good news (SiGN) model. Psychological Review. 131(1), 58-78. https://doi.org/10.1037/rev0000416","code":""},{"path":"https://sign-r.github.io/SiGN/reference/beta_sig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the β (beta) parameter for the SiGN model — beta_sig","text":"","code":"beta_sig(   use_beta = TRUE,   sig = TRUE,   sched1 = \"FR\",   sched2 = \"FR\",   il_dur1 = 1,   il_dur2 = 1,   s_plus_dur = 10 ) #> [1] 1.041393"},{"path":"https://sign-r.github.io/SiGN/reference/ccc.html","id":null,"dir":"Reference","previous_headings":"","what":"Concordance Correlation Coefficient (CCC) — ccc","title":"Concordance Correlation Coefficient (CCC) — ccc","text":"Computes Concordance Correlation Coefficient (CCC) two numeric vectors. CCC assesses agreement two sets measurements combining measures precision (correlation) accuracy (closeness identity line).","code":""},{"path":"https://sign-r.github.io/SiGN/reference/ccc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concordance Correlation Coefficient (CCC) — ccc","text":"","code":"ccc(x, y, bias_correction = TRUE)"},{"path":"https://sign-r.github.io/SiGN/reference/ccc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concordance Correlation Coefficient (CCC) — ccc","text":"x numeric vector predicted measured values. y numeric vector observed reference values. Must length x. bias_correction Logical. TRUE, applies bias correction using sample variance covariance estimators (.e., dividing \\(n - 1\\) instead \\(n\\)).","code":""},{"path":"https://sign-r.github.io/SiGN/reference/ccc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concordance Correlation Coefficient (CCC) — ccc","text":"numeric value -1 1 indicating level concordance. value 1 indicates perfect agreement.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/ccc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Concordance Correlation Coefficient (CCC) — ccc","text":"Lawrence -Kuei Lin. (1989). Concordance Correlation Coefficient Evaluate Reproducibility. Biometrics, 45(1), 255–268. https://doi.org/10.2307/2532051","code":""},{"path":"https://sign-r.github.io/SiGN/reference/ccc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concordance Correlation Coefficient (CCC) — ccc","text":"","code":"x <- c(1, 2, 3, 4, 5) y <- c(1.1, 1.9, 3.2, 4.1, 4.8) ccc(x, y)                          # Unbiased sample-based method #> [1] 0.9943241 ccc(x, y, bias_correction = FALSE) # Lin's original population method #> [1] 0.9943035"},{"path":"https://sign-r.github.io/SiGN/reference/choice_mod_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Model Fit with Descriptive and Likelihood-Based Metrics — choice_mod_eval","title":"Evaluate Model Fit with Descriptive and Likelihood-Based Metrics — choice_mod_eval","text":"Computes variety descriptive likelihood-based statistics evaluating fit model observed data. includes common descriptive error metrics, concordance coefficient, information criteria (AIC, BIC) based beta-distributed error model.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/choice_mod_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Model Fit with Descriptive and Likelihood-Based Metrics — choice_mod_eval","text":"","code":"choice_mod_eval(observed, predicted, k = 0, epsilon = 0.001, ...)"},{"path":"https://sign-r.github.io/SiGN/reference/choice_mod_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Model Fit with Descriptive and Likelihood-Based Metrics — choice_mod_eval","text":"observed numeric vector observed values (e.g., choice proportions). Values must lie within closed interval [0, 1]. predicted numeric vector predicted values. Must length observed, also constrained closed interval [0, 1]. k integer specifying number free parameters used generate predicted values. function incorporates error model adds one value (see Details). epsilon small continuity correction used constrain values strictly within open interval (0, 1). Defaults 0.001. necessary beta error model, undefined 0 1. ... Additional arguments passed internal functions.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/choice_mod_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Model Fit with Descriptive and Likelihood-Based Metrics — choice_mod_eval","text":"object class \"choice_mod_eval\" containing: desc_stats data frame descriptive fit statistics: sample size, R-squared, mean bias, RMSE, MAE, median absolute error, concordance correlation coefficient. info_criteria data frame listing parameter amount, estimated \\(\\phi\\) parameter value (precision beta distribution), log-likelihood, AIC, BIC. residuals numeric vector residuals (observed - predicted), printed default.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/choice_mod_eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate Model Fit with Descriptive and Likelihood-Based Metrics — choice_mod_eval","text":"residual-based coefficient determination (\\(R^2\\)) calculated : $$R^2 = 1 - \\frac{\\sum_i (y_i - \\hat{y}_i)^2}{\\sum_i (y_i - \\bar{y})^2}$$ \\(y_i\\) observed values, \\(\\hat{y}_i\\) predicted values, \\(\\bar{y}\\) mean observed values. form \\(R^2\\) widely used descriptive measure fit, interpreted caution context nonlinear models. Unlike linear regression, \\(R^2\\) clear interpretation terms explained variance, guaranteed fall 0 1. particular, can take negative values model fits worse mean. , best used rough, supplementary indicator model performance rather definitive measure fit—effectively, \"pseudo-\\(R^2\\).\" likelihood-based metrics $info_criteria, beta-distributed error model choice proportions incorporated. adds one fitted parameter (\\(\\phi\\)), shared across observations. Consequently, AIC BIC values computed k + 1 free parameters. error model assumes observed value \\(y_i\\) drawn independently Beta distribution mean equal choice model's prediction \\(\\mu_i\\) precision parameter \\(\\phi\\): $$y_i \\sim \\text{Beta}(\\alpha_i, \\beta_i)$$ : $$\\alpha_i = \\mu_i \\cdot \\phi,\\quad \\beta_i = (1 - \\mu_i) \\cdot \\phi$$ \\(\\mu_i\\) predicted value \\(\\phi\\) precision parameter. total log-likelihood computed : $$\\log L = \\sum_i \\log \\left[ \\text{Beta}(y_i | \\alpha_i, \\beta_i) \\right]$$ AIC BIC computed : $$\\text{AIC} = 2k - 2\\log L,\\quad \\text{BIC} = \\log(n) \\cdot k - 2\\log L$$ \\(k = 1\\) number estimated parameters \\(n\\) number observations. Observed predicted values assumed lie strictly within unit interval (0, 1). Values near 0 1 adjusted using epsilon parameter avoid undefined behaviour beta distribution. choice epsilon can strongly influence log-likelihood, particularly values approach 0 1. Users encouraged check sensitivity output value model selection focus. sample size less 30, message printed remind users information criteria may unstable overly sensitive small-sample settings.","code":""},{"path":[]},{"path":"https://sign-r.github.io/SiGN/reference/choice_mod_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Model Fit with Descriptive and Likelihood-Based Metrics — choice_mod_eval","text":"","code":"obs <- c(0.2, 0.4, 0.6, 0.8) pred <- c(0.25, 0.35, 0.65, 0.75) result <- choice_mod_eval(obs, pred) #> ℹ Sample size is small (n < 30); AIC and BIC may be unstable or less reliable for model comparison. result #> $desc_stats #>   n r_squared     mean_bias rmse  mae median_ae      ccc #> 1 4      0.95 -1.387779e-17 0.05 0.05      0.05 0.972973 #>  #> $info_criteria #>   n_parameters      phi   logLik       AIC       BIC #> 1            1 79.54191 6.409243 -10.81849 -11.43219 #>  #> Use `object$residuals` to access the residuals. result$residuals  # Access residuals directly #> [1] -0.05  0.05 -0.05  0.05"},{"path":"https://sign-r.github.io/SiGN/reference/choice_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate SiGN Model Parameter List — choice_params","title":"Generate SiGN Model Parameter List — choice_params","text":"helper function constructs named list parameters behavioural choice predictions function SiGN(). Users can either select predefined profile specify custom values. function includes built-validation recycling arguments lengths differ.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/choice_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate SiGN Model Parameter List — choice_params","text":"","code":"choice_params(  profile = c(\"zentall\", \"kendall\", \"fantino\"),  il_dur_a = NULL, il_dur_b = NULL,  tl_dur_a1 = NULL, tl_dur_a2 = NULL,  tl_dur_b1 = NULL, tl_dur_b2 = NULL,  tl_p_a1 = NULL, tl_p_a2 = NULL,  tl_p_b1 = NULL, tl_p_b2 = NULL,  tr_p_a1 = NULL, tr_p_a2 = NULL,  tr_p_b1 = NULL, tr_p_b2 = NULL,  il_sched_a = NULL, il_sched_b = NULL,  s_delta = 1,  beta_log = 10,  beta_toggle = TRUE,  display_params = FALSE  )"},{"path":"https://sign-r.github.io/SiGN/reference/choice_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate SiGN Model Parameter List — choice_params","text":"profile character string specifying default parameter profile. Must one \"zentall\", \"kendall\", \"fantino\". See details. il_dur_a, il_dur_b Numeric vector initial link durations alternatives B respectively. tl_dur_a1, tl_dur_a2 Numeric vector durations two terminal links alternative . tl_dur_b1, tl_dur_b2 Numeric vector durations two terminal links alternative B. tl_p_a1, tl_p_a2 Numeric vector entry probabilities two terminal links alternative . tl_p_b1, tl_p_b2 Numeric vector entry probabilities two terminal links alternative B. tr_p_a1, tr_p_a2 Numeric vector terminal reinforcement probabilities two terminal links alternative . tr_p_b1, tr_p_b2 Numeric vector terminal reinforcement probabilities two terminal links alternative B. il_sched_a, il_sched_b Schedule type initial link. Must either \"VI\" (variable-interval) \"FR\" (fixed-ratio). Case-insensitive. s_delta Time required perceive stimulus signals absence terminal reinforcement. Default 1. See also s_delta(). beta_log positive real number specifying base logarithm used β. Defaults 10. beta_toggle Logical defaulting TRUE. Permits model adjust balance conditional primary reinforcement signalled alternatives according Equation 6 Dunn et al. (2024). See also beta_sig(). display_params Logical. TRUE, prints parameter list data frame.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/choice_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate SiGN Model Parameter List — choice_params","text":"named list validated possibly recycled parameters suitable input SiGN() function.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/choice_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate SiGN Model Parameter List — choice_params","text":"Default Profiles: Three default profiles available streamline argument selection: \"zentall\" (based Stagner & Zentall, 2010), \"kendall\" (based Kendall, 1985), \"fantino\" (based Fantino, 1969). Notably, \" fantino\" profile reflects single terminal link procedure, consistent design used Fantino’s original study. Default profile values can overridden specifying corresponding arguments directly. argument lengths differ, values recycled maximum length, message. Temporal Units: SiGN model temporally relative, meaning allows initial terminal link durations treated unit time (e.g., seconds, minutes, hours, etc.). However, units need consistent across link durations. s_delta Conventionally, concurrent-chains paradigms measured time seconds easily discriminable stimuli. default value s_delta reflects convention. However, shorter longer temporal units used, stimuli takes considerable time discriminated, may prudent adjust s_delta accordingly. Signal Discrimination: choice alternative treated SiGN() function signalled terminal link durations non-zero either durations reinforcement probabilities differ terminal links. definition assumes differences duration reinforcement probability imply discriminability stimuli associated terminal link. example, one terminal link lasts 10 seconds 20 seconds, reinforcement probability 1, assumed organism can fully discriminate —e.g., terminal links may visually distinct (different colours) thus recognisable moment onset. SiGN model assumes (behavioural) function terminal link stimuli remains fixed across entire duration terminal link—, probability terminal reinforcement change partway terminal link. Procedures depart assumption may appropriately handled model. Schedule Selection: Setting initial link schedules \"FR\" suitable cases involving FR 1 schedule single timer employed initial links long VI schedules. \"FR\" setting take account switching behaviour present concurrent schedules using independent timers. example, single timer used two concurrent VI 30 schedules, setting Initial Link Schedule FR preferable time spent initial links controlled one timer, two independent timers operating concurrently. However, independent timers used initial link, model requires setting VI . Note SiGN model directly compute predictions ratio schedules. Instead, represents ratio duration individual reinforcement rate, rather common/shared one.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/choice_params.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate SiGN Model Parameter List — choice_params","text":"Dunn, R. M., Pisklak, J. M., McDevitt, M. ., & Spetch, M. L. (2024). Suboptimal choice: review quantification signal good news (SiGN) model. Psychological Review. 131(1), 58-78. https://doi.org/10.1037/rev0000416 Fantino, E. (1969). Choice rate reinforcement. Journal Experimental Analysis Behavior, 12(5), 723–730. https://doi.org/10.1901/jeab.1969.12-723 Kendall, S. B. (1985). study choice percentage reinforcement. Behavioural Processes, 10(4), 399–413. https://doi.org/10.1016/0376-6357(85)90040-3 Stagner, J. P., & Zentall, T. R. (2010). Suboptimal choice behavior pigeons. Psychonomic Bulletin & Review, 17(3), 412–416. https://doi.org/10.3758/PBR.17.3.412","code":""},{"path":[]},{"path":"https://sign-r.github.io/SiGN/reference/choice_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate SiGN Model Parameter List — choice_params","text":"","code":"# Use default Zentall profile z <- choice_params(\"zentall\", display_params = TRUE) #>   il_dur_a il_dur_b tl_dur_a1 tl_dur_a2 tl_dur_b1 tl_dur_b2 tl_p_a1 tl_p_a2 #> 1        1        1        10        10        10        10     0.2     0.8 #>   tl_p_b1 tl_p_b2 tr_p_a1 tr_p_a2 tr_p_b1 tr_p_b2 il_sched_a il_sched_b s_delta #> 1     0.2     0.8       1       0     0.5     0.5         FR         FR       1 #>   beta_log beta_toggle #> 1       10        TRUE  # Custom specification with minimal values k <- choice_params(   profile = \"kendall\",   tr_p_b1 = c(1, 0.5), tr_p_b2 = c(1, 0.5),   display_params = TRUE ) #>   il_dur_a il_dur_b tl_dur_a1 tl_dur_a2 tl_dur_b1 tl_dur_b2 tl_p_a1 tl_p_a2 #> 1        1        1        15        15        15        15     0.5     0.5 #> 2        1        1        15        15        15        15     0.5     0.5 #>   tl_p_b1 tl_p_b2 tr_p_a1 tr_p_a2 tr_p_b1 tr_p_b2 il_sched_a il_sched_b s_delta #> 1     0.5     0.5       1       0     1.0     1.0         FR         FR       1 #> 2     0.5     0.5       1       0     0.5     0.5         FR         FR       1 #>   beta_log beta_toggle #> 1       10        TRUE #> 2       10        TRUE"},{"path":"https://sign-r.github.io/SiGN/reference/dr_bonus.html","id":null,"dir":"Reference","previous_headings":"","what":"Bonus Delay Reduction — dr_bonus","title":"Bonus Delay Reduction — dr_bonus","text":"helper function compute bonus delay reduction alternative.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/dr_bonus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bonus Delay Reduction — dr_bonus","text":"","code":"dr_bonus(sig, big_t, s_plus_tr_p, s_plus_dur, tr_p, tl_dur)"},{"path":"https://sign-r.github.io/SiGN/reference/dr_bonus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bonus Delay Reduction — dr_bonus","text":"sig Logical vector indicating whether choice alternative signalled. big_t Numeric vector overall average programmed time terminal reinforcement start initial links (excluding time spent intertrial interval). See SiGN(). s_plus_tr_p Numeric vector terminal reinforcement probabilities alternative's \\(S^{+}\\) terminal link. See s_plus_tr_p(). s_plus_dur Numeric vector durations associated alternative's \\(S^{+}\\) terminal link. See s_plus_dur(). tr_p Numeric vector overall terminal reinforcement probabilities alternative. tl_dur Numeric vector average terminal link durations alternative.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/dr_bonus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bonus Delay Reduction — dr_bonus","text":"numeric vector representing bonus delay reduction.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/dr_bonus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bonus Delay Reduction — dr_bonus","text":"alternative signalled (sig == FALSE), bonus set 0.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/dr_bonus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bonus Delay Reduction — dr_bonus","text":"","code":"dr_bonus(   sig = TRUE,   big_t = 20,   s_plus_tr_p = 1,   s_plus_dur = 10,   tr_p = 0.2,   tl_dur = 10 ) #> [1] 16"},{"path":"https://sign-r.github.io/SiGN/reference/dur_entry_conflict.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Duration and Entry Probability Conflicts — dur_entry_conflict","title":"Check for Duration and Entry Probability Conflicts — dur_entry_conflict","text":"function checks conflicts terminal link durations corresponding entry probabilities. Specifically, returns TRUE specified durations greater zero associated entry probabilities equal zero. typically indicates logical inconsistency parameters choice alternative.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/dur_entry_conflict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Duration and Entry Probability Conflicts — dur_entry_conflict","text":"","code":"dur_entry_conflict(durs, probs)"},{"path":"https://sign-r.github.io/SiGN/reference/dur_entry_conflict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Duration and Entry Probability Conflicts — dur_entry_conflict","text":"durs list 4 numeric vectors representing terminal-link durations. probs list 4 numeric vectors representing terminal-link entry probabilities.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/dur_entry_conflict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Duration and Entry Probability Conflicts — dur_entry_conflict","text":"logical value: TRUE duration > 0 paired entry probability 0 FALSE otherwise.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/dur_entry_conflict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Duration and Entry Probability Conflicts — dur_entry_conflict","text":"","code":"durs <- list( tl1 = c(10, 15, 30, 0), tl2 = c(10, 15, 0,  0), tl3 = c(10, 15, 90, 0), tl4 = c(10, 15, 0,  0) ) # List of probabilities with no duration conflict probs_nc <- list( tl1 = c(0.2, 0.5, 1, 0), tl2 = c(0.8, 0.5, 0, 0), tl3 = c(0.2, 0.5, 1, 0), tl4 = c(0.8, 0.5, 0, 0) ) # List of probabilities with duration conflict probs_c <- list( tl1 = c(1, 0.5,   1, 0), tl2 = c(0, 0.5,   0, 0), tl3 = c(0.2, 0.5, 1, 0), tl4 = c(0.8, 0.5, 0, 0) )  dur_entry_conflict(durs, probs_nc) #> [1] FALSE dur_entry_conflict(durs, probs_c) #> [1] TRUE"},{"path":"https://sign-r.github.io/SiGN/reference/entry_p_sums.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum Entry Probabilities Across Four Terminal Links — entry_p_sums","title":"Sum Entry Probabilities Across Four Terminal Links — entry_p_sums","text":"function takes list 4 numeric vectors (representing entry probabilities terminal link) returns sum probabilities across 4 vectors.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/entry_p_sums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum Entry Probabilities Across Four Terminal Links — entry_p_sums","text":"","code":"entry_p_sums(x)"},{"path":"https://sign-r.github.io/SiGN/reference/entry_p_sums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum Entry Probabilities Across Four Terminal Links — entry_p_sums","text":"x list 4 numeric vectors equal number elements.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/entry_p_sums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum Entry Probabilities Across Four Terminal Links — entry_p_sums","text":"numeric vector sums, element corresponds sum four probabilities.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/entry_p_sums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum Entry Probabilities Across Four Terminal Links — entry_p_sums","text":"","code":"entry_p_sums(list(   a = c(0.2, 0.5, 1),   b = c(0.8, 0.5, 0),   c = c(0.2, 0.5, 1),   d = c(0.8, 0.5, 1) )) #> [1] 2 2 3"},{"path":"https://sign-r.github.io/SiGN/reference/eq_arg_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal Argument Check — eq_arg_n","title":"Equal Argument Check — eq_arg_n","text":"function checks whether elements list equal length. useful validating argument consistency list-based input, especially recycling vectorised operations depend uniform lengths.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/eq_arg_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal Argument Check — eq_arg_n","text":"","code":"eq_arg_n(x)"},{"path":"https://sign-r.github.io/SiGN/reference/eq_arg_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal Argument Check — eq_arg_n","text":"x list vectors.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/eq_arg_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal Argument Check — eq_arg_n","text":"logical scalar: TRUE elements length, FALSE otherwise.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/eq_arg_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal Argument Check — eq_arg_n","text":"","code":"eq_arg_n(list(1:3, 4:6))      # TRUE #> [1] TRUE eq_arg_n(list(1:3, 4:5))      # FALSE #> [1] FALSE eq_arg_n(list(\"a\", \"b\", \"c\")) # TRUE #> [1] TRUE"},{"path":"https://sign-r.github.io/SiGN/reference/loglik_err.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute (Negative) Log-Likelihood for Beta Error Model — loglik_err","title":"Compute (Negative) Log-Likelihood for Beta Error Model — loglik_err","text":"Calculates log-likelihood (negative log-likelihood) set observed values Beta-distributed error model.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/loglik_err.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute (Negative) Log-Likelihood for Beta Error Model — loglik_err","text":"","code":"loglik_err(observed, predicted, phi, neg = TRUE, epsilon = 0.001)"},{"path":"https://sign-r.github.io/SiGN/reference/loglik_err.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute (Negative) Log-Likelihood for Beta Error Model — loglik_err","text":"observed numeric vector observed values (e.g., proportions), range [0, 1]. predicted numeric vector predicted values model, also [0, 1]. phi scalar numeric vector specifying precision (concentration) parameter(s) Beta distribution. vector, must length observed predicted. neg Logical. TRUE (default), returns negative log-likelihood (useful optimisation). FALSE, returns log-likelihood. epsilon small numeric value used constrain observed predicted away 0 1, ensuring numerical stability (default 1e-3). See Details.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/loglik_err.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute (Negative) Log-Likelihood for Beta Error Model — loglik_err","text":"single numeric value: negative log-likelihood log-likelihood data Beta error model.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/loglik_err.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute (Negative) Log-Likelihood for Beta Error Model — loglik_err","text":"function calculates (log) likelihood observed choice proportions Beta-distributed error model. Since Beta distribution defined open interval (0, 1), small continuity correction (epsilon) applied observed predicted values avoid zero one values result undefined infinite log-likelihoods. choice epsilon can substantially affect resulting log-likelihood, particularly values near 0 1. due steep curvature Beta distribution near boundaries, especially shape parameters less 1. Smaller values epsilon reduce size correction, can introduce large penalties likelihood data approach boundaries. reason, important choose epsilon value balances numerical stability minimal distortion data. default epsilon = 0.001 typically sufficient behavioural data, users encouraged check sensitivity results values close 0 1.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/loglik_err.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute (Negative) Log-Likelihood for Beta Error Model — loglik_err","text":"observed data include values near 0 1, log-likelihood may highly sensitive choice epsilon. See Details.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/loglik_err.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute (Negative) Log-Likelihood for Beta Error Model — loglik_err","text":"","code":"# Scalar phi loglik_err(c(0.3, 0.6), c(0.25, 0.55), phi = 20) #> [1] -2.353555  # Vectorised phi loglik_err(c(0.3, 0.6), c(0.25, 0.55), phi = c(15, 25)) #> [1] -2.32292  # Return log-likelihood instead of negative log-likelihood loglik_err(c(0.3, 0.6), c(0.25, 0.55), phi = 20, neg = FALSE) #> [1] 2.353555"},{"path":"https://sign-r.github.io/SiGN/reference/pred_SiGN.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute SiGN Prediction — pred_SiGN","title":"Compute SiGN Prediction — pred_SiGN","text":"helper function compute probability selecting first alternative according SiGN (Signal Good News; Dunn et al. 2024) extension DRH (Delay Reduction Hypothesis; Squires & Fantino, 1971).","code":""},{"path":"https://sign-r.github.io/SiGN/reference/pred_SiGN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute SiGN Prediction — pred_SiGN","text":"","code":"pred_SiGN(r1, r2, cr1, cr2)"},{"path":"https://sign-r.github.io/SiGN/reference/pred_SiGN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute SiGN Prediction — pred_SiGN","text":"r1 Numeric vector terminal reinforcement rates alternative 1. r2 Numeric vector terminal reinforcement rates alternative 2. cr1 Numeric vector \\(\\delta\\) values alternative 1. cr2 Numeric vector \\(\\delta\\) values alternative 2. @details underlying calculation described Dunn et al. (2024), Equation 7 providing core formulation.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/pred_SiGN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute SiGN Prediction — pred_SiGN","text":"numeric vector predicted choice probabilities alternative 1.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/pred_SiGN.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute SiGN Prediction — pred_SiGN","text":"Dunn, R. M., Pisklak, J. M., McDevitt, M. ., & Spetch, M. L. (2024). Suboptimal choice: review quantification signal good news (SiGN) model. Psychological Review. 131(1), 58-78. https://doi.org/10.1037/rev0000416 Squires, N., Fantino, E. (1971). model choice simple concurrent concurrent-chains schedules. Journal Experimental Analysis Behavior. 15(1), 27 - 38. https://doi.org/10.1901/jeab.1971.15-27","code":""},{"path":"https://sign-r.github.io/SiGN/reference/pred_SiGN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute SiGN Prediction — pred_SiGN","text":"","code":"pred_SiGN(r1 = 0.05, r2 = 0.05, cr1 = 12, cr2 = 0.6) #> [1] 0.952381 pred_SiGN(r1 = 0.05, r2 = 0.01, cr1 = 30, cr2 = -30)  # returns 1 (edge case) #> [1] 1"},{"path":"https://sign-r.github.io/SiGN/reference/r.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Rate of (Terminal) Reinforcement — r","title":"Compute Rate of (Terminal) Reinforcement — r","text":"Calculates terminal reinforcement rate given initial link (IL) durations, terminal link (TL) duration, terminal reinforcement probability, schedule types. Optionally computes common effective IL duration schedules variable interval (VI).","code":""},{"path":"https://sign-r.github.io/SiGN/reference/r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Rate of (Terminal) Reinforcement — r","text":"","code":"r(  il_dur1, il_dur2,  tl_dur1, tr_p,  il_sched1, il_sched2,  common_il_dur = FALSE  )"},{"path":"https://sign-r.github.io/SiGN/reference/r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Rate of (Terminal) Reinforcement — r","text":"il_dur1 Duration first alternative's IL. il_dur2 Duration second alternative's IL. tl_dur1 Duration first alternative's TL. tr_p Probability terminal reinforcement. il_sched1 Schedule type initial links. (e.g., \"VI\" \"FR\"). See choice_params() additional details inputting schedule types. il_sched2 Schedule type second alternative's initial link. common_il_dur Logical; TRUE, common initial link (IL) duration computed, IL schedules \"VI\". FALSE, reinforcement rate computed using first alternative's IL duration, regardless schedule type.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Rate of (Terminal) Reinforcement — r","text":"numeric value (vector) giving computed terminal reinforcement rate.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Rate of (Terminal) Reinforcement — r","text":"using vectorised inputs, arguments differing lengths recycled according R's standard vector recycling rules. lengths compatible (.e., clean multiples), warning may issued. See base::Arithmetic() details.","code":""},{"path":[]},{"path":"https://sign-r.github.io/SiGN/reference/r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Rate of (Terminal) Reinforcement — r","text":"","code":"r(il_dur1 = 90, il_dur2 = 30, tl_dur1 = 30, tr_p = 1.0,   il_sched1 = \"VI\", il_sched2 = \"VI\", common_il_dur = TRUE) #> [1] 0.01904762  r(il_dur1 = 90, il_dur2 = NULL, tl_dur1 = 30, tr_p = 1.0,   il_sched1 = \"VI\", il_sched2 = \"VI\", common_il_dur = FALSE) #> [1] 0.008333333"},{"path":"https://sign-r.github.io/SiGN/reference/recycle_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List Recycle — recycle_list","title":"List Recycle — recycle_list","text":"Recycle list elements equal length.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/recycle_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Recycle — recycle_list","text":"","code":"recycle_list(x)"},{"path":"https://sign-r.github.io/SiGN/reference/recycle_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Recycle — recycle_list","text":"x named unnamed list element vector. Elements may vary length.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/recycle_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Recycle — recycle_list","text":"list element length equal maximum length original list elements. Shorter elements repeated match length.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/recycle_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Recycle — recycle_list","text":"","code":"recycle_list(list(a = 1:3, b = 5)) #> $a #> [1] 1 2 3 #>  #> $b #> [1] 5 5 5 #>   recycle_list(list(a = 1:7, b = c(\"Pigeon\", \"Pigeon\", \"Rat\"))) #> $a #> [1] 1 2 3 4 5 6 7 #>  #> $b #> [1] \"Pigeon\" \"Pigeon\" \"Rat\"    \"Pigeon\" \"Pigeon\" \"Rat\"    \"Pigeon\" #>"},{"path":"https://sign-r.github.io/SiGN/reference/s_delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminal Link Duration Adjustment for S- Signals — s_delta","title":"Terminal Link Duration Adjustment for S- Signals — s_delta","text":"Adjusts terminal link duration signalled extinction.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/s_delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminal Link Duration Adjustment for S- Signals — s_delta","text":"","code":"s_delta(tl_dur, tr_p, s_delta)"},{"path":"https://sign-r.github.io/SiGN/reference/s_delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminal Link Duration Adjustment for S- Signals — s_delta","text":"tl_dur Numeric vector. Duration terminal link. tr_p Numeric vector. Probability terminal reinforcement following terminal link. s_delta Numeric scalar vector. Duration S- signal use terminal reinforcement probability zero.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/s_delta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Terminal Link Duration Adjustment for S- Signals — s_delta","text":"numeric vector elements tl_dur replaced s_delta terminal link non-zero duration reinforcement probability zero.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/s_delta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Terminal Link Duration Adjustment for S- Signals — s_delta","text":"function named s_delta() reference operant conditioning notation \\(S^\\Delta\\), denotes stimulus signals unavailability reinforcement (.e., extinction). distinguishes \\(S^{-}\\), term commonly used respondent (Pavlovian) conditioning indicate stimulus associated absence unconditioned stimulus. However, due theoretical overlap operant respondent frameworks, \\(S^{-}\\) often (regrettably) used interchangeably \\(S^\\Delta\\), despite distinct origins. similar issue arises notation \\(S^{D}\\) (used operant contexts denote discriminative stimulus reinforcement) \\(S^{+}\\) (respondent counterpart), likewise sometimes conflated.","code":""},{"path":[]},{"path":"https://sign-r.github.io/SiGN/reference/s_delta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Terminal Link Duration Adjustment for S- Signals — s_delta","text":"","code":"s_delta(   tl_dur = c(10, 10, 10, 0),   tr_p = c(0, 1, 0.5, 1),   s_delta = 1   ) #> [1]  1 10 10  0"},{"path":"https://sign-r.github.io/SiGN/reference/s_plus_dur.html","id":null,"dir":"Reference","previous_headings":"","what":"Duration of the S+ Terminal Link — s_plus_dur","title":"Duration of the S+ Terminal Link — s_plus_dur","text":"Given two terminal link stimuli, identifies one greater reinforcement probability per unit time (.e., higher \\(p/t\\) ratio), returns duration. interpreted \\(S^{+}\\) duration within signalled alternative.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/s_plus_dur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duration of the S+ Terminal Link — s_plus_dur","text":"","code":"s_plus_dur(sig, tl_dur1, tl_dur2, tr_p1, tr_p2)"},{"path":"https://sign-r.github.io/SiGN/reference/s_plus_dur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Duration of the S+ Terminal Link — s_plus_dur","text":"sig Logical. Indicates whether terminal link stimuli assumed discriminable. See sig_check(). tl_dur1 Numeric. Duration first terminal link. tl_dur2 Numeric. Duration second terminal link. tr_p1 Numeric. Probability terminal (primary/unconditional) reinforcement following first terminal link. tr_p2 Numeric. Probability terminal (primary/unconditional) reinforcement following second terminal link.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/s_plus_dur.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Duration of the S+ Terminal Link — s_plus_dur","text":"numeric vector containing duration identified \\(S^{+}\\) terminal link, NA undefined.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/s_plus_dur.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Duration of the S+ Terminal Link — s_plus_dur","text":"terminal reinforcement probabilities 0, either terminal link duration 0, function returns NA. choice alternative signalled (sig == FALSE), NA also returned.","code":""},{"path":[]},{"path":"https://sign-r.github.io/SiGN/reference/s_plus_dur.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Duration of the S+ Terminal Link — s_plus_dur","text":"","code":"s_plus_dur(TRUE, 10, 20, 0.5, 0.8) #> [1] 10 s_plus_dur(TRUE, 10, 20, 0, 0) # Returns NA #> [1] NA s_plus_dur(FALSE, 10, 20, 0.5, 0.8) # Returns NA #> [1] NA"},{"path":"https://sign-r.github.io/SiGN/reference/s_plus_tr_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminal Reinforcement Probability of the S+ Terminal Link — s_plus_tr_p","title":"Terminal Reinforcement Probability of the S+ Terminal Link — s_plus_tr_p","text":"Given two terminal link stimuli, identifies one greater reinforcement probability per unit time (.e., higher \\(p/t\\) ratio), returns terminal reinforcement probability. interpreted \\(S^{+}\\) reinforcement probability within signalled alternative.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/s_plus_tr_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminal Reinforcement Probability of the S+ Terminal Link — s_plus_tr_p","text":"","code":"s_plus_tr_p(sig, tl_dur1, tl_dur2, tr_p1, tr_p2)"},{"path":"https://sign-r.github.io/SiGN/reference/s_plus_tr_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminal Reinforcement Probability of the S+ Terminal Link — s_plus_tr_p","text":"sig Logical. Indicates whether terminal link stimuli assumed discriminable. See sig_check(). tl_dur1 Numeric. Duration first terminal link. tl_dur2 Numeric. Duration second terminal link. tr_p1 Numeric. Probability terminal (primary/unconditional) reinforcement following first terminal link. tr_p2 Numeric. Probability terminal (primary/unconditional) reinforcement following second terminal link.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/s_plus_tr_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Terminal Reinforcement Probability of the S+ Terminal Link — s_plus_tr_p","text":"numeric vector containing terminal reinforcement probability identified \\(S^{+}\\) stimulus, NA undefined.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/s_plus_tr_p.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Terminal Reinforcement Probability of the S+ Terminal Link — s_plus_tr_p","text":"terminal reinforcement probabilities 0, either terminal link duration 0, function returns NA. choice alternative signalled (sig == FALSE), NA also returned.","code":""},{"path":[]},{"path":"https://sign-r.github.io/SiGN/reference/s_plus_tr_p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Terminal Reinforcement Probability of the S+ Terminal Link — s_plus_tr_p","text":"","code":"s_plus_tr_p(TRUE, 10, 20, 0.5, 0.8) #> [1] 0.5 s_plus_tr_p(TRUE, 10, 20, 0, 0) # Returns NA #> [1] NA s_plus_tr_p(FALSE, 10, 20, 0.5, 0.8) # Returns NA #> [1] NA"},{"path":"https://sign-r.github.io/SiGN/reference/sig_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Whether a Terminal Link Alternative Is Signalled — sig_check","title":"Determine Whether a Terminal Link Alternative Is Signalled — sig_check","text":"Evaluates whether alternative can considered \"signalled\" basis two terminal link (TL) durations reinforcement probabilities.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/sig_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Whether a Terminal Link Alternative Is Signalled — sig_check","text":"","code":"sig_check(dur1, dur2, rein_p1, rein_p2)"},{"path":"https://sign-r.github.io/SiGN/reference/sig_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Whether a Terminal Link Alternative Is Signalled — sig_check","text":"dur1 numeric vector giving durations alternative's first TL. dur2 numeric vector giving durations alternative's second TL. rein_p1 numeric vector giving terminal reinforcement probabilities alternative's first TL. rein_p2 numeric vector giving terminal reinforcement probabilities alternative's second TL.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/sig_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine Whether a Terminal Link Alternative Is Signalled — sig_check","text":"logical vector indicating whether choice alternative can considered signalled.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/sig_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine Whether a Terminal Link Alternative Is Signalled — sig_check","text":"durations probabilities input correspond one choice alternative. choice alternative treated signalled terminal link (TL) durations non-zero either durations terminal reinforcement probabilities differ two TLs. definition assumes differences duration reinforcement probability imply discriminability stimuli associated TL. example, one TL lasts 10 seconds 20 seconds, reinforcement probability 1, assumed organism can fully discriminate —e.g., TLs may visually distinct (different colours) thus recognisable moment onset. See also choice_params()","code":""},{"path":"https://sign-r.github.io/SiGN/reference/sig_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine Whether a Terminal Link Alternative Is Signalled — sig_check","text":"","code":"sig_check(10, 10, 0.5, 0.5)  # FALSE — same duration and probability #> [1] FALSE sig_check(10, 10, 0.5, 0.0)  # TRUE  — same duration, different probability #> [1] TRUE sig_check(10, 5, 0.5, 0.5)   # TRUE  — different durations #> [1] TRUE sig_check(0, 10, 0.5, 0.5)   # FALSE — one duration is zero #> [1] FALSE"},{"path":"https://sign-r.github.io/SiGN/reference/subopt_avian.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset of Avian Suboptimal Choice Data from Dunn et al. (2024) — subopt_avian","title":"Subset of Avian Suboptimal Choice Data from Dunn et al. (2024) — subopt_avian","text":"dataset contains compiled avian suboptimal choice data (pigeons starlings) multiple published studies meet inclusion criteria outlined Dunn et al. (2024). subset selected model evaluation.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/subopt_avian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset of Avian Suboptimal Choice Data from Dunn et al. (2024) — subopt_avian","text":"","code":"subopt_avian"},{"path":"https://sign-r.github.io/SiGN/reference/subopt_avian.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subset of Avian Suboptimal Choice Data from Dunn et al. (2024) — subopt_avian","text":"data frame 128 rows 32 columns: row Original row index full dataset subopt_full, retained traceability reproducibility. study Short identifier study data parameters extracted. year Year study published. species Species tested experiment (e.g., pigeon starling). exp Experiment number reported original study. Values joined '&' indicate data aggregated across experiments. condition Short label used identify conditions within study, aiding dataset assembly. n Number subjects condition. cp Observed choice proportion reported study. il_dur_a, il_dur_b Average programmed initial link (IL) durations alternatives B, respectively. FR1 schedules assigned duration 1; fixed-ratio schedules given duration \\(1 + (\\text{ratio}/\\text{run rate})\\). tl_dur_a1, tl_dur_a2, tl_dur_b1, tl_dur_b2 Average programmed durations terminal links. example, tl_dur_a1 corresponds first terminal link alternative . tl_p_a1, tl_p_a2, tl_p_b1, tl_p_b2 Probability entering respective terminal link. tr_p_a1, tr_p_a2, tr_p_b1, tr_p_b2 Probability terminal (.e., primary) reinforcement following entry respective terminal link. il_sched_a, il_sched_b Schedule type used initial links (e.g., VI, FR). tl_sched_a1, tl_sched_a2, tl_sched_b1, tl_sched_b2 Schedule type used terminal link. forced_exposure Ordinal variable describing amount forced exposure (FE) trials used study. See Details. DOI Digital Object Identifier (DOI) original study. ref Full bibliographic reference study. data_version character column specifying dataset version based date last manually curated corrected (e.g., \"2025-07-20\"). Used tracking updates compiled data.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/subopt_avian.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Subset of Avian Suboptimal Choice Data from Dunn et al. (2024) — subopt_avian","text":"Dunn, R. M., Pisklak, J. M., McDevitt, M. ., & Spetch, M. L. (2024). Suboptimal choice: review quantification signal good news (SiGN) model. Psychological Review. 131(1), 58-78. https://doi.org/10.1037/rev0000416","code":""},{"path":"https://sign-r.github.io/SiGN/reference/subopt_avian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset of Avian Suboptimal Choice Data from Dunn et al. (2024) — subopt_avian","text":"FE: include FE trials; 1 FE session start condition; FE trials subjects. FE: 4 - 20 FE trials start session; 6 - 12 sessions FE start first condition experiment; 2 sessions start condition. Lots FE: FE trial following every suboptimal blackout; least 50% trials FE.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/subopt_full.html","id":null,"dir":"Reference","previous_headings":"","what":"Suboptimal Choice Data from Dunn et al. (2024) — subopt_full","title":"Suboptimal Choice Data from Dunn et al. (2024) — subopt_full","text":"data set contains suboptimal choice data multiple published studies. data compiled Dunn et al. (2024).","code":""},{"path":"https://sign-r.github.io/SiGN/reference/subopt_full.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suboptimal Choice Data from Dunn et al. (2024) — subopt_full","text":"","code":"subopt_full"},{"path":"https://sign-r.github.io/SiGN/reference/subopt_full.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Suboptimal Choice Data from Dunn et al. (2024) — subopt_full","text":"data frame 330 rows 44 columns: row Row index. study Short identifier study data parameters extracted. year Year study published. species Species tested experiment (e.g., pigeon starling). strain Strain rat used. sex Sex subjects (M = Male, F = Female, MF = Males Females). sex_MF_ratio Ratio Males Females. age Age subjects. exp Experiment number reported original study. Values joined '&' indicate data aggregated across experiments. condition Short label used identify conditions within study, aiding dataset assembly. n Number subjects condition. cp Observed choice proportion reported study. il_dur_a, il_dur_b Average programmed initial link (IL) durations alternatives B, respectively. FR1 schedules assigned duration 1; fixed-ratio schedules given duration \\(1 + (\\text{ratio}/\\text{run rate})\\). tl_dur_a1, tl_dur_a2, tl_dur_b1, tl_dur_b2 Average programmed durations terminal links. example, tl_dur_a1 corresponds first terminal link alternative . tl_p_a1, tl_p_a2, tl_p_b1, tl_p_b2 Probability entering respective terminal link. tr_p_a1, tr_p_a2, tr_p_b1, tr_p_b2 Probability terminal (.e., primary) reinforcement following entry respective terminal link. il_sched_a, il_sched_b Schedule type used initial links (e.g., VI, FR). tl_sched_a1, tl_sched_a2, tl_sched_b1, tl_sched_b2 Schedule type used terminal link. operant_response Description behavioural response required make choice thus obtain terminal reinforcement. forced_exposure Ordinal variable describing amount forced exposure (FE) trials used study. See Details. deprive_lvl Deprivation level subjects condition, expressed percentage free-feeding body weight. il_stim Description initial link stimulus used. tl_s_splus_stim Description S+ terminal link stimulus used. tl_s_minus_stim Description S- terminal link stimulus used. tl_unsig_stim Description unsignalled (optimal) alternative's terminal link stimulus used. term_rein Description terminal (.e., primary unconditioned) reinforcer used study (e.g., piece cereal; images female models). term_rein_cat Broad category terminal reinforcer (e.g., food, sexualized imagery), providing general classification term_rein. DOI Digital Object Identifier (DOI) original study. ref Full bibliographic reference study. data_version character column specifying dataset version based date last manually curated corrected (e.g., \"2025-07-20\"). Used tracking updates compiled data.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/subopt_full.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Suboptimal Choice Data from Dunn et al. (2024) — subopt_full","text":"Dunn, R. M., Pisklak, J. M., McDevitt, M. ., & Spetch, M. L. (2024). Suboptimal choice: review quantification signal good news (SiGN) model. Psychological Review. 131(1), 58-78. https://doi.org/10.1037/rev0000416 Dunn, R. M., Pisklak, J. M., McDevitt, M. ., & Spetch, M. L. (2024). signals good news (sign) model data code repository. Open Science Framework. https://doi.org/10.17605/OSF.IO/39QTJ","code":""},{"path":"https://sign-r.github.io/SiGN/reference/subopt_full.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suboptimal Choice Data from Dunn et al. (2024) — subopt_full","text":"data set reflects merged corrected version three separate data files originally provided Dunn et al. (2024) via Open Science Framework (OSF). original files supplied OSF contained numeric values inadvertently -rounded. values corrected version restore intended precision. FE: include FE trials; 1 FE session start condition; FE trials subjects. FE: 4 - 20 FE trials start session; 6 - 12 sessions FE start first condition experiment; 2 sessions start condition. Lots FE: FE trial following every suboptimal blackout; least 50% trials FE.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/valid_sched_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Schedule Type Input — valid_sched_input","title":"Validate Schedule Type Input — valid_sched_input","text":"Check whether pairs schedule types input valid. Specifically, pair must either \"VI\" \"VI\" \"FR\", \"FR\".","code":""},{"path":"https://sign-r.github.io/SiGN/reference/valid_sched_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Schedule Type Input — valid_sched_input","text":"","code":"valid_sched_input(x)"},{"path":"https://sign-r.github.io/SiGN/reference/valid_sched_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Schedule Type Input — valid_sched_input","text":"x list 2 character vectors, vector contains schedule labels. See choice_params() additional details inputting schedule types.","code":""},{"path":"https://sign-r.github.io/SiGN/reference/valid_sched_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Schedule Type Input — valid_sched_input","text":"logical value: TRUE pairs contain valid matching schedule types.","code":""},{"path":[]},{"path":"https://sign-r.github.io/SiGN/reference/valid_sched_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Schedule Type Input — valid_sched_input","text":"","code":"# Valid valid_sched_input(list(c(\"VI\", \"VI\", \"FR\"), c(\"VI\", \"VI\", \"FR\"))) #> [1] TRUE # Invalid valid_sched_input(list(c(\"FR\", \"VI\", \"FR\"), c(\"VI\", \"VI\", \"FR\"))) #> [1] FALSE"},{"path":[]},{"path":"https://sign-r.github.io/SiGN/news/index.html","id":"id_2025-development-version","dir":"Changelog","previous_headings":"","what":"2025-08-02","title":"SiGN (development version)","text":"Model Evaluation: Descriptive Statistics Model Evaluation: Information-Theoretic Statistics","code":""},{"path":"https://sign-r.github.io/SiGN/news/index.html","id":"id_2025-development-version-1","dir":"Changelog","previous_headings":"","what":"2025-08-01","title":"SiGN (development version)","text":"Added general choice_mod_eval() replace SiGN_eval(), allowing pre-fit models compared directly SiGN model.","code":""},{"path":"https://sign-r.github.io/SiGN/news/index.html","id":"id_2025-development-version-2","dir":"Changelog","previous_headings":"","what":"2025-07-31","title":"SiGN (development version)","text":"Added SiGN_gen_eval(), function applying free parameters SiGN model returning model evaluation metrics.","code":""},{"path":"https://sign-r.github.io/SiGN/news/index.html","id":"id_2025-development-version-3","dir":"Changelog","previous_headings":"","what":"2025-07-28","title":"SiGN (development version)","text":"Added function compute (negative) log-Likelihood Beta error model Finished SiGN_eval() function evaluate model fit descriptive likelihood-based metrics.","code":""},{"path":"https://sign-r.github.io/SiGN/news/index.html","id":"id_2025-development-version-4","dir":"Changelog","previous_headings":"","what":"2025-07-26","title":"SiGN (development version)","text":"Added function Lin’s Concordance Correlation Coefficient. Added function SiGN eval (incomplete).","code":""},{"path":"https://sign-r.github.io/SiGN/news/index.html","id":"id_2025-development-version-5","dir":"Changelog","previous_headings":"","what":"2025-07-22","title":"SiGN (development version)","text":"Updated choice_params() display recycling info message three arguments differ length.","code":""},{"path":"https://sign-r.github.io/SiGN/news/index.html","id":"id_2025-development-version-6","dir":"Changelog","previous_headings":"","what":"2025-07-20","title":"SiGN (development version)","text":"Updated TL entry probabilities choice proportions subopt_full Cunningham & Shahan 2019 (newly digitized values). Adding versioning subopt_full subopt_avian data sets. Improved “Signal Discrimination” notes choice_params() documentation.","code":""}]
